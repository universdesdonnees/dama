[
  {
    "objectID": "README.html",
    "href": "README.html",
    "title": "DAMA",
    "section": "",
    "text": "D√©couvrir, Assimiler, Ma√Ætriser, Appliquer (DAMA)Bienvenue sur DAMA, un blog d√©di√© √† rendre la data science facile, utile et accessible √† tous.Notre objectif est de vous fournir l‚Äôessentiel pour pratiquer et performer en data science !"
  },
  {
    "objectID": "README.html#fonctionnalit√©s",
    "href": "README.html#fonctionnalit√©s",
    "title": "DAMA",
    "section": "üåü Fonctionnalit√©s",
    "text": "üåü Fonctionnalit√©s\n\nMini-cours : Retrouvez les derniers mini-cours que je poste r√©guli√®rement sur LinkedIn. Suivez-moi sur LinkedIn pour ne rien manquer !\nCours : Progressez en data science √† votre rythme avec nos cours. Que vous soyez d√©butant, interm√©diaire ou avanc√©, vous trouverez des exemples concrets et des exercices adapt√©s pour ma√Ætriser R, cr√©er des visualisations √©poustouflantes, devenir un h√©ros Python, g√©rer des bases de donn√©es avec SQL, d√©velopper des mod√®les pr√©dictifs puissants avec le machine learning, et bien plus encore. Acc√©dez aux cours ici.\nBlog : D√©couvrez, apprenez et partagez √† travers notre blog, un espace de vulgarisation scientifique autour de la data science. Vous y trouverez des articles de fond pour comprendre les concepts cl√©s, des tutoriels pratiques pour monter en comp√©tences, et des projets et retours d‚Äôexp√©rience inspirants. Acc√©dez au blog ici."
  },
  {
    "objectID": "README.html#collaboration",
    "href": "README.html#collaboration",
    "title": "DAMA",
    "section": "ü§ù Collaboration",
    "text": "ü§ù Collaboration\nVous √™tes d√©j√† expert.e et vous souhaitez r√©diger un article et/ou cr√©er un cours ? Vous adh√©rez √† l‚Äôesprit Open Learning Source ? C‚Äôest avec plaisir que nous collaborerons avec vous !\n\nüì© Comment contribuer ?\n\nEnvoyez-moi un e-mail √† damaestla@gmail.com ou contactez-moi directement sur LinkedIn.\nCommencez √† r√©diger en utilisant nos templates articles et cours.\nSoumettez votre contenu, je le revois avec vous et on le publie ensemble !\n\nRejoignez la communaut√© DAMA et faisons briller la data science accessible √† tous !"
  },
  {
    "objectID": "README.html#construit-avec",
    "href": "README.html#construit-avec",
    "title": "DAMA",
    "section": "üõ†Ô∏è Construit avec",
    "text": "üõ†Ô∏è Construit avec\nQuarto"
  },
  {
    "objectID": "README.html#auteur",
    "href": "README.html#auteur",
    "title": "DAMA",
    "section": "üë©‚Äçüíª Auteur",
    "text": "üë©‚Äçüíª Auteur\nM√©nyssa Cherifa-Luron, PhD"
  },
  {
    "objectID": "README.html#licence",
    "href": "README.html#licence",
    "title": "DAMA",
    "section": "üìÑ Licence",
    "text": "üìÑ Licence\nCe projet est sous licence Creative Commons Attribution-NonCommercial 4.0 International.\n\nLa licence CC BY-NC 4.0 vous permet de :\nPartager : Copier, distribuer et communiquer le mat√©riel par tous moyens et sous tous formats. Adapter : Remixer, transformer et cr√©er √† partir du mat√©riel. Cependant, vous devez respecter les conditions suivantes :\nAttribution : Vous devez cr√©diter l‚Äô≈íuvre d‚Äôorigine, int√©grer un lien vers la licence et indiquer si des modifications ont √©t√© effectu√©es. Ces informations doivent √™tre fournies par tous les moyens raisonnables, sans sugg√©rer que l‚Äôauteur original vous soutient ou soutient la fa√ßon dont vous avez utilis√© son ≈íuvre. Pas d‚ÄôUtilisation Commerciale : Vous n‚Äô√™tes pas autoris√© √† faire un usage commercial de cette ≈íuvre, en tout ou partie. Pas de restrictions compl√©mentaires : Vous n‚Äô√™tes pas autoris√© √† appliquer des conditions l√©gales ou des mesures techniques qui restreindraient l√©galement autrui √† utiliser l‚Äô≈íuvre dans les conditions d√©crites par la licence. Aucune garantie n‚Äôest donn√©e avec cette licence. Il se peut qu‚Äôelle ne vous donne pas toutes les permissions n√©cessaires pour votre utilisation, par exemple pour les droits moraux, le droit des donn√©es personnelles ou le droit √† l‚Äôimage.\nPour plus d‚Äôinformations et pour consulter le texte complet de la licence, veuillez vous r√©f√©rer √† l‚ÄôURL suivante : https://creativecommons.org/licenses/by-nc/4.0/deed.fr https://creativecommons.org/licenses/by-nc/4.0/deed.fr"
  },
  {
    "objectID": "LICENSE-CC-BY-NC-ND-4.0.html",
    "href": "LICENSE-CC-BY-NC-ND-4.0.html",
    "title": "Attribution-NonCommercial-NoDerivatives 4.0 International",
    "section": "",
    "text": "Creative Commons Corporation (‚ÄúCreative Commons‚Äù) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an ‚Äúas-is‚Äù basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible.\n\nCreative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses.\n\nConsiderations for licensors: Our public licenses are intended for use by those authorized to give the public permission to use material in ways otherwise restricted by copyright and certain other rights. Our licenses are irrevocable. Licensors should read and understand the terms and conditions of the license they choose before applying it. Licensors should also secure all rights necessary before applying our licenses so that the public can reuse the material as expected. Licensors should clearly mark any material not subject to the license. This includes other CC-licensed material, or material used under an exception or limitation to copyright. More considerations for licensors.\nConsiderations for the public: By using one of our public licenses, a licensor grants the public permission to use the licensed material under specified terms and conditions. If the licensor‚Äôs permission is not necessary for any reason‚Äìfor example, because of any applicable exception or limitation to copyright‚Äìthen that use is not regulated by the license. Our licenses grant only permissions under copyright and certain other rights that a licensor has authority to grant. Use of the licensed material may still be restricted for other reasons, including because others have copyright or other rights in the material. A licensor may make special requests, such as asking that all changes be marked or described. Although not required by our licenses, you are encouraged to respect those requests where reasonable. More considerations for the public.\n\n\n\n\nBy exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International Public License (‚ÄúPublic License‚Äù). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\n\n\n\nAdapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\nCopyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\nEffective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\nExceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\nLicensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\nLicensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\nLicensor means the individual(s) or entity(ies) granting rights under this Public License.\nNonCommercial means not primarily intended for or directed towards commercial advantage or monetary compensation. For purposes of this Public License, the exchange of the Licensed Material for other material subject to Copyright and Similar Rights by digital file-sharing or similar means is NonCommercial provided there is no payment of monetary compensation in connection with the exchange.\nShare means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\nSui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\nYou means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\n\n\n\n\n\nLicense grant.\n\nSubject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\nA. reproduce and Share the Licensed Material, in whole or in part, for NonCommercial purposes only; and\nB. produce and reproduce, but not Share, Adapted Material for NonCommercial purposes only.\nExceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\nTerm. The term of this Public License is specified in Section 6(a).\nMedia and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material.\nDownstream recipients.\nA. Offer from the Licensor ‚Äì Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\nB. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\nNo endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\n\nOther rights.\n\nMoral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\nPatent and trademark rights are not licensed under this Public License.\nTo the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties, including when the Licensed Material is used other than for NonCommercial purposes.\n\n\n\n\n\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\n\nAttribution.\n\nIf You Share the Licensed Material, You must:\nA. retain the following if it is supplied by the Licensor with the Licensed Material:\n\nidentification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\na copyright notice;\na notice that refers to this Public License;\na notice that refers to the disclaimer of warranties;\na URI or hyperlink to the Licensed Material to the extent reasonably practicable;\n\nB. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and\nC. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\nFor the avoidance of doubt, You do not have permission under this Public License to Share Adapted Material.\nYou may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\nIf requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\n\n\n\n\n\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\n\nfor the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database for NonCommercial purposes only and provided You do not Share Adapted Material;\nif You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material; and\nYou must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\n\n\n\n\nUnless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You.\nTo the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You.\nThe disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\n\n\n\n\n\nThis Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\nWhere Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\nautomatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\nupon express reinstatement by the Licensor.\n\nFor the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\nFor the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\nSections 1, 5, 6, 7, and 8 survive termination of this Public License.\n\n\n\n\n\nThe Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\nAny arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.\n\n\n\n\n\nFor the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\nTo the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\nNo term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\nNothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\n\n\nCreative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the ‚ÄúLicensor.‚Äù Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark ‚ÄúCreative Commons‚Äù or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.\nCreative Commons may be contacted at creativecommons.org."
  },
  {
    "objectID": "LICENSE-CC-BY-NC-ND-4.0.html#creative-commons-attribution-noncommercial-noderivatives-4.0-international-public-license",
    "href": "LICENSE-CC-BY-NC-ND-4.0.html#creative-commons-attribution-noncommercial-noderivatives-4.0-international-public-license",
    "title": "Attribution-NonCommercial-NoDerivatives 4.0 International",
    "section": "",
    "text": "By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International Public License (‚ÄúPublic License‚Äù). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\n\n\n\nAdapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\nCopyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\nEffective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\nExceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\nLicensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\nLicensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\nLicensor means the individual(s) or entity(ies) granting rights under this Public License.\nNonCommercial means not primarily intended for or directed towards commercial advantage or monetary compensation. For purposes of this Public License, the exchange of the Licensed Material for other material subject to Copyright and Similar Rights by digital file-sharing or similar means is NonCommercial provided there is no payment of monetary compensation in connection with the exchange.\nShare means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\nSui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\nYou means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\n\n\n\n\n\nLicense grant.\n\nSubject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\nA. reproduce and Share the Licensed Material, in whole or in part, for NonCommercial purposes only; and\nB. produce and reproduce, but not Share, Adapted Material for NonCommercial purposes only.\nExceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\nTerm. The term of this Public License is specified in Section 6(a).\nMedia and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material.\nDownstream recipients.\nA. Offer from the Licensor ‚Äì Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\nB. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\nNo endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\n\nOther rights.\n\nMoral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\nPatent and trademark rights are not licensed under this Public License.\nTo the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties, including when the Licensed Material is used other than for NonCommercial purposes.\n\n\n\n\n\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\n\nAttribution.\n\nIf You Share the Licensed Material, You must:\nA. retain the following if it is supplied by the Licensor with the Licensed Material:\n\nidentification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\na copyright notice;\na notice that refers to this Public License;\na notice that refers to the disclaimer of warranties;\na URI or hyperlink to the Licensed Material to the extent reasonably practicable;\n\nB. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and\nC. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\nFor the avoidance of doubt, You do not have permission under this Public License to Share Adapted Material.\nYou may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\nIf requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\n\n\n\n\n\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\n\nfor the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database for NonCommercial purposes only and provided You do not Share Adapted Material;\nif You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material; and\nYou must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\n\n\n\n\nUnless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You.\nTo the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You.\nThe disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\n\n\n\n\n\nThis Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\nWhere Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\nautomatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\nupon express reinstatement by the Licensor.\n\nFor the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\nFor the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\nSections 1, 5, 6, 7, and 8 survive termination of this Public License.\n\n\n\n\n\nThe Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\nAny arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.\n\n\n\n\n\nFor the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\nTo the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\nNo term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\nNothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\n\n\nCreative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the ‚ÄúLicensor.‚Äù Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark ‚ÄúCreative Commons‚Äù or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.\nCreative Commons may be contacted at creativecommons.org."
  },
  {
    "objectID": "cours/python_poo.html",
    "href": "cours/python_poo.html",
    "title": "Gentle introduction √† la Programmation Orient√©e Objets en Python",
    "section": "",
    "text": "La Programmation Orient√©e Objet (POO), c‚Äôest la base de la base, le flow de la programmation !\nEn POO, une classe c‚Äôest comme un moule √† objets, une repr√©sentation qui d√©finit les caract√©ristiques et les comportements des entit√©s du m√™me type.\nEt un objet ? C‚Äôest une instance unique cr√©√©e √† partir de ce moule, comme un rappeur qui sort du lot !\nTout comme un rappeur a ses propres caract√©ristiques (son flow, son style, ses punchlines‚Ä¶), un objet a ses propres attributs (des variables) et m√©thodes (des fonctions).\n\n\n\n Fig 1. Imagine une voiture en tant que classe, avec des attributs principaux tels que le mod√®le, le prix, la couleur et l‚Äôann√©e de construction. Tu peux cr√©er autant d‚Äôobjets que tu le souhaites √† partir de la classe.\n\n\nEn Python, tout est objet, m√™me les classes ! C‚Äôest dire si √ßa a de la classe.\nPour acc√©der aux attributs d‚Äôun objet, on utilise la notation ‚Äúdot‚Äù, comme quand on dit ‚Äútel rappeur.son flow‚Äù, tu vois le style ?\nEt pour cr√©er une instance √† partir d‚Äôune classe, c‚Äôest comme si tu lan√ßais un nouveau rappeur dans le game ! Tu utilises le constructeur de la classe.\nBref, la POO c‚Äôest le swag de la programmation ! √áa structure ton code comme un bon album, avec chaque classe qui joue son r√¥le.\nAlors, t‚Äôes chaud pour devenir une OOP star ? On va coder √ßa comme jamais !\n\n\n\nLes avantages de ce style de programmation, c‚Äôest comme les atouts d‚Äôun bon rappeur :\n\nUn flow r√©utilisable et partageable üé§ Avec la POO, ton code est comme un bon couplet : Tu peux le r√©utiliser et le partager sans tout r√©√©crire √† chaque fois !\n\n\nUne s√©curit√© renforc√©e üîí La POO, c‚Äôest comme un bon contrat de label : Tu prot√®ges tes donn√©es sensibles pour √©viter les leaks !\n\n\nUn debugging facilit√© üêõ Avec la POO, quand y‚Äôa un bug, c‚Äôest comme chercher la fausse note : Tu sais direct dans quelle mesure chercher !\n\n\nUne flexibilit√© de ouf üöÄ La POO, c‚Äôest comme un featuring qui d√©chire : Tu peux r√©utiliser les talents de plusieurs classes sans r√©inventer la roue !\n\nLes mots cl√©s de la POO, c‚Äôest comme le flow, les punchlines, les phases et les mesures pour un rappeur : Classe, Objet, M√©thodes et Attributs, c‚Äôest les bases pour rapper de la bonne POO !\nEt les 4 concepts fondamentaux, c‚Äôest comme les 4 √©l√©ments du hip-hop :\n\nH√©ritage\nEncapsulation\nPolymorphisme\nAbstraction\n\nC‚Äôest ce qui fait toute la richesse de la POO !\n\n\n\n\n\n\n√Ä Retenir\n\n\n\n\n\nEn somme, la POO, c‚Äôest plus modulaire qu‚Äôun beat et plus r√©utilisable qu‚Äôun sample. Elle permet :\n\n\nModularit√© et r√©utilisabilit√© du code\n\n\nFacilit√© de maintenance et d‚Äô√©volution du code\n\n\nRepr√©sentation naturelle des concepts du monde r√©el\n\n\n\n\n\n\n\n\nUne classe, c‚Äôest comme un moule √† g√¢teau en forme de rappeur :\nElle d√©finit les caract√©ristiques et les comportements - comme un rappeur a son style, son flow, ses punchlines.\nConcr√®tement, une classe c‚Äôest un blueprint, un mod√®le qui va servir √† cr√©er des objets.\nC‚Äôest un peu comme un label de musique qui a son identit√© et qui va signer des artistes qui correspondent √† son style.\nQuand tu cr√©es un objet √† partir de cette classe, on dit que tu cr√©es une instance.\n\nUne instance est un exemplaire unique de cette classe !\n\nUn peu comme un rappeur sign√© sur le label, qui a son style propre tout en s‚Äôinscrivant dans l‚Äôidentit√© du label.\nEt le gros avantage, c‚Äôest que tu peux cr√©er autant d‚Äôinstances que tu veux √† partir de la m√™me classe !\nC‚Äôest comme si ton label pouvait signer des dizaines de rappeurs qui ont chacun leur personnalit√© mais qui repr√©sentent tous l‚Äôesprit du label.\nBref, les classes c‚Äôest la base de la POO et c‚Äôest ce qui va te permettre de structurer ton code de fa√ßon claire et r√©utilisable.\n\n# D√©finition basique de la classe Rappeur\nclass Rappeur: \n    pass\n\n# D√©finition de l'instance unique menyssa\nmenyssa = Rappeur()  \n\n# menyssa est bien un objet Rappeur\ntype(menyssa) \n\n__main__.Rappeur\n\n\n\n\n\n\n\n\nLe terme __main__\n\n\n\nLe terme __main__ dans Python a une signification sp√©ciale. Il fait r√©f√©rence au nom de l‚Äôespace de noms (ou du ‚Äúscope‚Äù) dans lequel le script courant est ex√©cut√©.\nC‚Äôest une mani√®re pour Python de savoir si le fichier actuel est ex√©cut√© comme script principal ou s‚Äôil est import√© √† partir d‚Äôun autre fichier.*\n\n\n\n\n\nLe constructeur __init__ est appel√© automatiquement quand tu cr√©es une nouvelle instance de ta classe.\nSon r√¥le ?\nInitialiser les attributs de ton objet, comme un Directeur Artistique (DA) qui d√©finirait le style et l‚Äôimage de son artiste.\nEt self dans tout √ßa ? C‚Äôest le rappeur lui-m√™me !\nDans une m√©thode, self fait r√©f√©rence √† l‚Äôinstance courante de la classe. C‚Äôest gr√¢ce √† lui que tu peux acc√©der aux attributs et m√©thodes de ton objet.\nQuand tu appelles une m√©thode sur une instance, Python passe automatiquement cette instance en premier argument. C‚Äôest pour √ßa que tu retrouves self partout !\n\n\n\n\n\n\n√Ä Retenir\n\n\n\n\n\ninit et self, permettent de construire et de faire vivre tes objets, comme un DA et son rappeur qui cr√©ent ensemble un personnage unique. :\n\n\ninit est le constructeur qui initialise les attributs\n\n\nself repr√©sente l‚Äôinstance courante dans les m√©thodes\n\n\nEnsemble, ils donnent vie √† tes objets et leur permettent d‚Äôinteragir avec le monde !\n\n\n\n\n\n\n\n\nLes attributs en POO, c‚Äôest comme les caract√©ristiques qui d√©finissent un bon rappeur.\nPar exemple pour chaque rappeur on peut lui attribu√© les caract√©ristiques suivantes :\n\nLe flow (self.flow) : c‚Äôest son d√©bit, sa mani√®re de rapper. √áa peut √™tre smooth, agressif, technique‚Ä¶ C‚Äôest ce qui fait son style unique.\nLe nombre d‚Äôalbums (self.nb_albums) : √ßa montre son exp√©rience, comme le nombre de projets sur GitHub pour un dev. Plus t‚Äôen as, plus t‚Äôes respect√© !\nLes featuring (self.featurings) : c‚Äôest les collab avec d‚Äôautres artistes. Comme quand tu fais du pair programming ou que tu participes √† un projet open source.\n\nVoici comment d√©clarer ces attributs dans notre classe ‚ÄúRappeur‚Äù\n\n# D√©finition de la classe Rappeur \nclass Rappeur:\n    # Constructeur de la classe avec les attributs\n    def __init__(self, nom, flow, nb_albums, featurings):\n        self.nom = nom              # Nom du rappeur\n        self.flow = flow            # Style de flow musical du rappeur\n        self.nb_albums = nb_albums  # Nombre total d'albums produits\n        self.featurings = featurings  # Liste des artistes avec lesquels il a collabor√©\n\n# Cr√©ation des instances de la classe Rappeur pour Booba, Vald et Niska.\n# Chaque instance est cr√©√©e avec des d√©tails sp√©cifiques au rappeur.\nbooba = Rappeur(nom=\"Booba\", \n                flow=\"Agressif et technique\",                \n                nb_albums=10,\n                featurings=[\"Kaaris\", \"Damso\", \"Gato\"])\n\nvald = Rappeur(nom=\"Vald\",\n               flow=\"Sombre et introspectif\",\n               nb_albums=6,\n               featurings=[\"Suikon Blaz AD\", \"Damso\"])\n\nniska = Rappeur(nom=\"Niska\", \n                flow=\"M√©lodique et festif\", \n                nb_albums=4, \n                featurings=[\"Booba\", \"SCH\", \"Hamza\"])\n\n# Ici, on affiche le nombre d'albums produits par Niska et le style de Booba.\nprint(f\"Niska a produit {niska.nb_albums} albums et \\n\"\n      f\"le flow de Booba est : {booba.flow}\")\n\n# Ici, on affiche le flow de vald et son nombre d'album.\nprint(f\"\\nVald a produit {vald.nb_albums} albums et son flow est {vald.flow.lower()}\")\n\nNiska a produit 4 albums et \nle flow de Booba est : Agressif et technique\n\nVald a produit 6 albums et son flow est sombre et introspectif\n\n\n\n\n\nLes m√©thodes, c‚Äôest ce qui permet √† tes objets d‚Äôagir, d‚Äôinteragir et de se d√©marquer.\nUne m√©thode peut √™tre :\n\nUn flow ‚Äúgetter‚Äù pour r√©cup√©rer des infos (get_punchline())\nUn flow ‚Äúsetter‚Äù pour modifier l‚Äô√©tat (set_style(new_style))\nUn flow ‚Äúcalculateur‚Äù pour traiter des donn√©es (calculer_nb_albums())\nOu m√™me un flow ‚Äúabstract‚Äù pour d√©finir un comportement g√©n√©ral (rapper())\n\nLes m√©thodes, c‚Äôest aussi ce qui permet √† tes objets de communiquer entre eux. Un peu comme des featuring entre rappeurs !\n\n# Importation du module random\nimport random\n\n# D√©finition de la classe Rappeur\nclass Rappeur:\n    # Constructeur de la classe avec les attributs n√©cessaires pour d√©finir un rappeur\n    def __init__(self, nom, flow, nb_albums, featurings, punchlines):\n        self.nom = nom              \n        self.flow = flow            \n        self.nb_albums = nb_albums  \n        self.featurings = featurings  \n        self.punchlines = punchlines  # Liste des punchlines c√©l√®bres du rappeur\n    \n    # M√©thode pour afficher une punchline au hasard\n    def balancer_punchline(self):\n        # Utilisation de random.choice pour s√©lectionner et afficher une punchline al√©atoire de la liste\n        print(f\"{self.nom} balance : {random.choice(self.punchlines)}\")\n\n# Cr√©ation d'une instance Booba\nbooba = Rappeur(nom=\"Booba\", \n                flow=\"Agressif et technique\",                \n                nb_albums=10,\n                featurings=[\"Kaaris\", \"Damso\", \"Gato\"],\n                punchlines=[\"92i\", \"Pitbull\", \"Kalash\"])\n\n# Appel de la m√©thode balancer_punchline pour afficher une punchline de Booba tir√©e au hasard\nbooba.balancer_punchline()\n\nBooba balance : Pitbull\n\n\nMaintenant allons un peu plus long et imaginons un clash entre rappeurs (hihihi!)\n\nimport random  # Importation n√©cessaire pour utiliser random.choice\n\nclass Rappeur:\n    def __init__(self, nom, flow, nb_albums, featurings, punchlines):\n        self.nom = nom  \n        self.flow = flow  \n        self.nb_albums = nb_albums  \n        self.featurings = featurings  \n        self.punchlines = punchlines  \n\n\n    def balancer_punchline(self):\n        print(f\"{self.nom} balance : {random.choice(self.punchlines)}\")\n\n    # M√©thode permettant √† un rappeur de clasher un autre rappeur \n    # en utilisant la premi√®re punchline de sa liste\n    def clasher(self, autre_rappeur):\n        print(f\"{self.nom} clash {autre_rappeur.nom} : {self.punchlines[0]}\")\n        \n    # M√©thode permettant √† un rappeur de r√©pondre √† un \n    # clash avec une punchline sp√©cifique\n    def repondre(self, autre_rappeur, punchline):\n        print(f\"{self.nom} r√©pond √† {autre_rappeur.nom} : {punchline}\")\n\n# Cr√©ation des instances pour Booba et Kaaris\nbooba = Rappeur(nom=\"Booba\", \n                flow=\"Agressif et technique\",                \n                nb_albums=10,\n                featurings=[\"Kaaris\", \"Damso\", \"Gato\"],\n                punchlines=[\"T'es qu'un fils de...\", \"J'vais t'faire une Kalash en live\"])        \n\nkaaris = Rappeur(nom=\"Kaaris\",\n                 flow=\"Aggressif et sombre\",\n                 nb_albums=8,\n                 featurings=[\"Gazo\", \"Kalash Criminel\", \"Hamza\"],\n                 punchlines=[\"J'vais t'faire danser la Zumba\", \"T'es m√™me pas un vrai MC\"])\n\n# Simulation d'un clash entre Booba et Kaaris\nbooba.clasher(kaaris)\nkaaris.repondre(booba, \"T'es qu'un tocard !\")\nbooba.repondre(kaaris, \"TG ! J'suis le DUC !\")\n\nBooba clash Kaaris : T'es qu'un fils de...\nKaaris r√©pond √† Booba : T'es qu'un tocard !\nBooba r√©pond √† Kaaris : TG ! J'suis le DUC !\n\n\nLa puissance des attributs et des m√©thodes r√©sident dans l‚Äôint√©raction de tes objets de mani√®re intuitive et styl√©e.\n\n\n\n\n\n\n√Ä Retenir\n\n\n\n\n\nles attributs et m√©thodes c‚Äôest ce qui donne vie √† tes objets et leur permet de briller sur la sc√®ne de ton programme !\nAlors pour cr√©er des m√©thodes qui claquent, suis ces tips :\n\n\nDonne-leur un nom explicite qui d√©crit bien leur r√¥le\n\n\nUtilise le self pour acc√©der aux attributs et autres m√©thodes de l‚Äôobjet\n\n\nS√©pare bien les responsabilit√©s : une m√©thode = une t√¢che pr√©cise\n\n\nDocumente-les avec des docstrings pour expliquer ce qu‚Äôelles font\n\n\nLa PEP 8 est ton ami !\n\n\n\n\n\n\n\n\n\n\n\nFocus : PEP8 et Annotation de type\n\n\n\n\n\nVoici la m√™me classe avec le code PEP 8 friendly et les annotations de type\n\nfrom typing import List # annoter les attributs featurings et punchlines.\nimport random\nclass Rappeur:\n    \"\"\"Classe d√©finissant un rappeur caract√©ris√© par son nom, style de flow, nombre \n    d'albums, collaborations et punchlines.\n    \"\"\"\n    def __init__(self, nom: str, flow: str, nb_albums: int, featurings: List[str], \n                 punchlines: List[str]):\n        self.nom: str = nom\n        self.flow: str = flow\n        self.nb_albums: int = nb_albums\n        self.featurings: List[str] = featurings\n        self.punchlines: List[str] = punchlines\n\n    def balancer_punchline(self) -&gt; None:\n        \"\"\"Affiche une punchline al√©atoire du rappeur.\"\"\"\n        punchline: str = random.choice(self.punchlines)\n        print(f\"{self.nom} balance : {punchline}\")\n\n    def clasher(self, autre_rappeur: 'Rappeur') -&gt; None:\n        \"\"\"Permet au rappeur de clasher un autre rappeur en utilisant la premi√®re \n        punchline de sa liste.\n        \"\"\"\n        print(f\"{self.nom} clash {autre_rappeur.nom} : {self.punchlines[0]}\")\n        \n    def repondre(self, autre_rappeur: 'Rappeur', punchline: str) -&gt; None:\n        \"\"\"Permet au rappeur de r√©pondre √† un clash avec une punchline sp√©cifique.\"\"\"\n        print(f\"{self.nom} r√©pond √† {autre_rappeur.nom} : {punchline}\")\n\n# Cr√©ation d'instances pour Booba et Kaaris avec typage explicite\nbooba = Rappeur(\n    nom=\"Booba\", \n    flow=\"Agressif et technique\",                \n    nb_albums=10,\n    featurings=[\"Kaaris\", \"Damso\", \"Gato\"],\n    punchlines=[\"T'es qu'un fils de...\", \"J'vais t'faire une Kalash en live\"]\n)        \n\nkaaris = Rappeur(\n    nom=\"Kaaris\",\n    flow=\"Aggressif et sombre\",\n    nb_albums=8,\n    featurings=[\"Gazo\", \"Kalash Criminel\", \"Hamza\"],\n    punchlines=[\"J'vais t'faire danser la Zumba\", \"T'es m√™me pas un vrai MC\"]\n)\n\n# Simulation d'un clash et r√©ponses entre Booba et Kaaris\nbooba.clasher(kaaris)\nkaaris.repondre(booba, \"T'es qu'un tocard !\")\nbooba.repondre(kaaris, \"TG ! J'suis le DUC !\")\n\nBooba clash Kaaris : T'es qu'un fils de...\nKaaris r√©pond √† Booba : T'es qu'un tocard !\nBooba r√©pond √† Kaaris : TG ! J'suis le DUC !\n\n\n\n\n\n\n\n\nC‚Äôest essentiel pour g√©rer les interactions entre objets,contr√¥ler l‚Äôacc√®s aux donn√©es et rendre le code plus lisible, comme un rappeur qui adapte son flow √† diff√©rents beats pour cr√©er des sons uniques et puissants. üé§üí™\nComme vu pr√©c√©demment, pour chaque instance de Rappeur, tu peux acc√©der √† ses attributs directement\n\nprint(booba.nom)  \nprint(booba.flow) \n\nBooba\nAgressif et technique\n\n\nPour modifier les attributs, tu assignes simplement une nouvelle valeur.\nPar exemple, si tu veux changer le flow de Booba\n\nbooba.flow = \"Lyrique et complexe\"\nprint(booba.flow)\n\nLyrique et complexe\n\n\nSi tu veux changer une punchline sp√©cifique ou en ajouter une nouvelle\n\nbooba.punchlines[0] = \"Nouvelle punchline plus forte\"\nbooba.punchlines.append(\"Tout le monde sait que j'suis le meilleur\")  \n\nIl est souvent plus judicieux de contr√¥ler la modification des attributs via des m√©thodes au lieu de les modifier directement. Cela offre une meilleure encapsulation (notion que nous verrons apr√®s).\nTu pourrais ajouter une m√©thode comme changer_flow() directement dans ta classe Rappeur\n\nfrom typing import List\nimport random\n\nclass Rappeur:\n    \"\"\"Classe d√©finissant un rappeur caract√©ris√© par son nom, style de flow, nombre \n    d'albums, collaborations et punchlines.\n    \"\"\"\n    def __init__(self, nom: str, flow: str, nb_albums: int, featurings: List[str], \n                 punchlines: List[str]):\n        self.nom: str = nom\n        self.flow: str = flow\n        self.nb_albums: int = nb_albums\n        self.featurings: List[str] = featurings\n        self.punchlines: List[str] = punchlines\n\n    def balancer_punchline(self) -&gt; None:\n        \"\"\"Affiche une punchline al√©atoire du rappeur.\"\"\"\n        punchline: str = random.choice(self.punchlines)\n        print(f\"{self.nom} balance : {punchline}\")\n\n    def clasher(self, autre_rappeur: 'Rappeur') -&gt; None:\n        \"\"\"Permet au rappeur de clasher un autre rappeur en utilisant la premi√®re \n        punchline de sa liste.\n        \"\"\"\n        print(f\"{self.nom} clash {autre_rappeur.nom} : {self.punchlines[0]}\")\n        \n    def repondre(self, autre_rappeur: 'Rappeur', punchline: str) -&gt; None:\n        \"\"\"Permet au rappeur de r√©pondre √† un clash avec une punchline sp√©cifique.\"\"\"\n        print(f\"{self.nom} r√©pond √† {autre_rappeur.nom} : {punchline}\")\n\n    def changer_flow(self, nouveau_flow: str) -&gt; None:\n        \"\"\"Change le flow du rappeur.\"\"\"\n        self.flow = nouveau_flow\n\n# Cr√©ation de l'instance de Booba\nbooba = Rappeur(\n    nom=\"Booba\", \n    flow=\"Agressif et technique\",                \n    nb_albums=10,\n    featurings=[\"Kaaris\", \"Damso\", \"Gato\"],\n    punchlines=[\"T'es qu'un fils de...\", \"J'vais t'faire une Kalash en live\"]\n)\n\n# Affichage du flow avant la modification\nprint(\"Flow avant : \", booba.flow)\n\n# Modification du flow\nbooba.changer_flow(\"Po√©tique et introspectif\")\n\n# Affichage du flow apr√®s la modification\nprint(\"Flow apr√®s : \", booba.flow)\n\nFlow avant :  Agressif et technique\nFlow apr√®s :  Po√©tique et introspectif\n\n\n\n\n\n\n\n\nToute variable n‚Äôest pas un attribut\n\n\n\nL‚Äôattribut nouveau_flow n‚Äô√©tait pas n√©cessaire dans le constructeur de la classe. Pour changer le flow, il est plus appropri√© d‚Äôutiliser une m√©thode d√©di√©e.\nExplication : Le constructeur d‚Äôune classe est g√©n√©ralement utilis√© pour initialiser les attributs qui d√©finissent l‚Äô√©tat de base d‚Äôune instance. nouveau_flow est plus une action ponctuelle qu‚Äôun attribut d‚Äô√©tat permanent de l‚Äôobjet. Avoir un attribut initial pour flow est logique car il d√©crit une propri√©t√© de l‚Äôinstance de Rappeur. En revanche, nouveau_flow ressemble plus √† une valeur temporaire utilis√©e pour modifier flow.*\n\n\nEn suivant ces √©tapes, tu peux efficacement g√©rer et mettre √† jour les attributs de tes instances de Rappeur, ce qui te permet de maintenir ton code organis√© et tes donn√©es √† jour.\nVoil√† les gars, vous savez maintenant comment g√©rer les attributs de vos rappeurs comme des pros !\nMaintenant TIME TO PRACTICE ! üí™\n\n\n\nJe t‚Äôai concoct√© une s√©rie d‚Äôexercices passionnants üåü qui te permettront non seulement de cr√©er de nouvelles classes, mais aussi de (re)d√©couvrir des notions essentielles de la programmation Python üêç.\nCes exercices sont sp√©cialement con√ßus pour booster ta compr√©hension des principes de la programmation orient√©e objet üîÑ, tout en te donnant l‚Äôoccasion de manipuler des attributs, de g√©rer des m√©thodes, et d‚Äôexplorer des interactions complexes entre objets.\nBonne courage et surtout, prends du plaisir en codant ! üöÄ‚ú®\n\n\n\n\nCr√©e une classe Rappeur avec les attributs suivants :\n\nnom : le nom du rappeur.\nflow : une description du style de flow du rappeur.\nalbums : une liste des noms d‚Äôalbums du rappeur.\n\nLa classe doit aussi inclure une m√©thode introduction() qui affiche une phrase d√©crivant le rappeur et une m√©thode sortir_album() qui prend le nom d‚Äôun nouvel album et l‚Äôajoute √† la liste des albums.\n\n\n\n\n\n\nConseil\n\n\n\nPour la m√©thode sortir_album(), assure-toi de v√©rifier que l‚Äôalbum n‚Äôest pas d√©j√† dans la liste avant de l‚Äôajouter. Cela √©vitera les doublons dans la discographie du rappeur.\n\n\n\n\n\n\n\n\nCr√©e une classe Livre avec les attributs suivants :\n\ntitre : le titre du livre.\nauteur : l‚Äôauteur du livre.\n\nLa classe doit inclure des m√©thodes pour :\n\nD√©finir un premier livre num√©rique et afficher ses informations.\nMettre √† jour le titre et l‚Äôauteur d‚Äôun livre.\nAfficher les d√©tails d‚Äôun livre.\n\n\n\n\n\n\n\nConseil\n\n\n\nLorsque tu modifies les attributs d‚Äôun livre, pense √† utiliser des m√©thodes de getter et de setter. Cela te permet de contr√¥ler comment les attributs sont mis √† jour et de valider les donn√©es si n√©cessaire.\n\n\n\n\n\n\n\n\nCr√©e une classe Account avec les attributs suivants :\n\nsolde : le solde initial du compte.\n\nLa classe doit inclure des m√©thodes pour :\n\nD√©poser des fonds sur le compte.\nRetirer des fonds du compte.\nAppliquer un taux d‚Äôint√©r√™t au solde du compte.\n\n\n\n\n\n\n\nConseil\n\n\n\nTeste scrupuleusement les m√©thodes de d√©p√¥t et de retrait pour g√©rer correctement les sc√©narios o√π le compte pourrait devenir n√©gatif. Ajoute des conditions pour emp√™cher le retrait de fonds sup√©rieurs au solde disponible.\n\n\n\n\n\n\n\n\nCr√©e une classe CompteBancaire avec les attributs suivants :\n\nidentifiant : l‚Äôidentifiant du compte.\nnom_proprietaire : le nom du propri√©taire du compte.\nsolde : le solde initial du compte.\n\nLa classe doit inclure des m√©thodes pour :\n\nG√©rer les d√©p√¥ts et les retraits, en appliquant des agios en cas de d√©couvert.\nAfficher tous les d√©tails du compte.\n\n\n\n\n\n\n\nConseil\n\n\n\nPour g√©rer les d√©couverts, envisage d‚Äôajouter un attribut qui d√©finit un d√©couvert maximum autoris√©. Cela rendra la gestion du compte plus flexible et r√©aliste.\n\n\n\n\n\n\n\n\nAm√©liore la classe Rappeur pour inclure un attribut collaborations, qui est une liste de tuples. Chaque tuple contient le nom d‚Äôun autre rappeur et le titre de la chanson sur laquelle ils ont collabor√©.\nLa classe doit inclure des m√©thodes pour :\n\nAjouter une collaboration √† la liste des collaborations.\nAfficher toutes les collaborations du rappeur.\n\n\n\n\n\n\n\nConseil\n\n\n\nQuand tu ajoutes des collaborations, assure-toi de v√©rifier si la collaboration existe d√©j√† pour √©viter les entr√©es en double. Cela peut √™tre fait en v√©rifiant si le tuple (rappeur, titre de la chanson) est d√©j√† dans la liste des collaborations.\n\n\n\n\n\n\n\n\nCr√©e une classe Carte avec les attributs suivants :\n\nvaleur : la valeur de la carte.\nnom : le nom de la carte.\n\nCr√©e une classe Paquet avec les attributs suivants :\n\ncartes : la liste des cartes du paquet.\n\nLa classe Paquet doit inclure des m√©thodes pour :\n\nM√©langer le paquet de cartes.\nDistribuer les cartes √©quitablement entre les joueurs.\n\nCr√©e une classe Joueur avec les attributs suivants :\n\nmain : la main du joueur.\n\nLa classe Joueur doit inclure des m√©thodes pour :\n\nPr√©parer la main du joueur pour la bataille.\n\nCr√©e une classe Tournoi avec les attributs suivants :\n\njoueurs : la liste des joueurs participants.\n\nLa classe Tournoi doit inclure des m√©thodes pour :\n\nD√©rouler la bataille entre les joueurs.\nD√©clarer le gagnant du tournoi.\n\n\n\n\n\n\n\nConseil\n\n\n\nPour la distribution des cartes, assure-toi que le m√©lange soit complet avant de distribuer les cartes afin d‚Äôassurer l‚Äô√©quit√© du jeu. Utilise des m√©thodes robustes pour g√©rer les √©galit√©s et les cas sp√©ciaux o√π plusieurs tours de cartes sont n√©cessaires.\n\n\n\n\n\n\n\n\nCr√©e une classe Battle avec les attributs suivants : * rappeur1 : le premier rappeur participant. * rappeur2 : le deuxi√®me rappeur participant.\nLa classe Battle doit inclure des m√©thodes pour : * Faire s‚Äôaffronter les deux rappeurs en affichant leurs punchlines et d√©terminer le gagnant. * Afficher le gagnant de la bataille et sa punchline gagnante.\nBonus : Impl√©mente une m√©thode juger_punchline(punchline) dans la classe Rappeur qui attribue un score √† une punchline bas√© sur des crit√®res comme la rime, le nombre de syllabes, ou d‚Äôautres aspects stylistiques que tu juges importants.\n\n\n\n\n\n\nConseil\n\n\n\nDans la m√©thode juger_punchline(punchline), consid√®re d‚Äôutiliser des techniques d‚Äôanalyse de texte pour √©valuer les punchlines, comme compter les syllabes ou utiliser des expressions r√©guli√®res pour identifier les rimes et autres figures de style.\n\n\n\n\n\n\n\nLa correction sera disponible prochainement ;)\n\n\nPlus de cours\n\n\n\n\n\n√Ä propos des auteurs\n\nM√©nyssa Cherifa-Luron, PhD est data scientist et formatrice freelance.\n\n\n\n\n\nCopyright and licence\n\n¬© 2024, M√©nyssa Cherifa-Luron\n\n\n \n\n\t\n\t\n\n\n\n\t\n\t\n\t\t\n\t\n\n\n\n\t\n\t\n\t\t\n\t\n\n Ce cours est sous licence Creative Commons Attribution-NonCommercial 4.0 (CC BY-NC 4.0)  International licence.\n\n\n\nCiter ce cours :\n\nM√©nyssa Cherifa-Luron. ‚ÄúGentle introduction √† la Programmation Orient√©e Objets en Python‚Äù. DAMA, 23/05/2024. Disponible ici"
  },
  {
    "objectID": "cours/python_poo.html#la-programmation-orient√©e-objet",
    "href": "cours/python_poo.html#la-programmation-orient√©e-objet",
    "title": "Gentle introduction √† la Programmation Orient√©e Objets en Python",
    "section": "",
    "text": "La Programmation Orient√©e Objet (POO), c‚Äôest la base de la base, le flow de la programmation !\nEn POO, une classe c‚Äôest comme un moule √† objets, une repr√©sentation qui d√©finit les caract√©ristiques et les comportements des entit√©s du m√™me type.\nEt un objet ? C‚Äôest une instance unique cr√©√©e √† partir de ce moule, comme un rappeur qui sort du lot !\nTout comme un rappeur a ses propres caract√©ristiques (son flow, son style, ses punchlines‚Ä¶), un objet a ses propres attributs (des variables) et m√©thodes (des fonctions).\n\n\n\n Fig 1. Imagine une voiture en tant que classe, avec des attributs principaux tels que le mod√®le, le prix, la couleur et l‚Äôann√©e de construction. Tu peux cr√©er autant d‚Äôobjets que tu le souhaites √† partir de la classe.\n\n\nEn Python, tout est objet, m√™me les classes ! C‚Äôest dire si √ßa a de la classe.\nPour acc√©der aux attributs d‚Äôun objet, on utilise la notation ‚Äúdot‚Äù, comme quand on dit ‚Äútel rappeur.son flow‚Äù, tu vois le style ?\nEt pour cr√©er une instance √† partir d‚Äôune classe, c‚Äôest comme si tu lan√ßais un nouveau rappeur dans le game ! Tu utilises le constructeur de la classe.\nBref, la POO c‚Äôest le swag de la programmation ! √áa structure ton code comme un bon album, avec chaque classe qui joue son r√¥le.\nAlors, t‚Äôes chaud pour devenir une OOP star ? On va coder √ßa comme jamais !"
  },
  {
    "objectID": "cours/python_poo.html#avantages",
    "href": "cours/python_poo.html#avantages",
    "title": "Gentle introduction √† la Programmation Orient√©e Objets en Python",
    "section": "",
    "text": "Les avantages de ce style de programmation, c‚Äôest comme les atouts d‚Äôun bon rappeur :\n\nUn flow r√©utilisable et partageable üé§ Avec la POO, ton code est comme un bon couplet : Tu peux le r√©utiliser et le partager sans tout r√©√©crire √† chaque fois !\n\n\nUne s√©curit√© renforc√©e üîí La POO, c‚Äôest comme un bon contrat de label : Tu prot√®ges tes donn√©es sensibles pour √©viter les leaks !\n\n\nUn debugging facilit√© üêõ Avec la POO, quand y‚Äôa un bug, c‚Äôest comme chercher la fausse note : Tu sais direct dans quelle mesure chercher !\n\n\nUne flexibilit√© de ouf üöÄ La POO, c‚Äôest comme un featuring qui d√©chire : Tu peux r√©utiliser les talents de plusieurs classes sans r√©inventer la roue !\n\nLes mots cl√©s de la POO, c‚Äôest comme le flow, les punchlines, les phases et les mesures pour un rappeur : Classe, Objet, M√©thodes et Attributs, c‚Äôest les bases pour rapper de la bonne POO !\nEt les 4 concepts fondamentaux, c‚Äôest comme les 4 √©l√©ments du hip-hop :\n\nH√©ritage\nEncapsulation\nPolymorphisme\nAbstraction\n\nC‚Äôest ce qui fait toute la richesse de la POO !\n\n\n\n\n\n\n√Ä Retenir\n\n\n\n\n\nEn somme, la POO, c‚Äôest plus modulaire qu‚Äôun beat et plus r√©utilisable qu‚Äôun sample. Elle permet :\n\n\nModularit√© et r√©utilisabilit√© du code\n\n\nFacilit√© de maintenance et d‚Äô√©volution du code\n\n\nRepr√©sentation naturelle des concepts du monde r√©el"
  },
  {
    "objectID": "cours/python_poo.html#classe",
    "href": "cours/python_poo.html#classe",
    "title": "Gentle introduction √† la Programmation Orient√©e Objets en Python",
    "section": "",
    "text": "Une classe, c‚Äôest comme un moule √† g√¢teau en forme de rappeur :\nElle d√©finit les caract√©ristiques et les comportements - comme un rappeur a son style, son flow, ses punchlines.\nConcr√®tement, une classe c‚Äôest un blueprint, un mod√®le qui va servir √† cr√©er des objets.\nC‚Äôest un peu comme un label de musique qui a son identit√© et qui va signer des artistes qui correspondent √† son style.\nQuand tu cr√©es un objet √† partir de cette classe, on dit que tu cr√©es une instance.\n\nUne instance est un exemplaire unique de cette classe !\n\nUn peu comme un rappeur sign√© sur le label, qui a son style propre tout en s‚Äôinscrivant dans l‚Äôidentit√© du label.\nEt le gros avantage, c‚Äôest que tu peux cr√©er autant d‚Äôinstances que tu veux √† partir de la m√™me classe !\nC‚Äôest comme si ton label pouvait signer des dizaines de rappeurs qui ont chacun leur personnalit√© mais qui repr√©sentent tous l‚Äôesprit du label.\nBref, les classes c‚Äôest la base de la POO et c‚Äôest ce qui va te permettre de structurer ton code de fa√ßon claire et r√©utilisable.\n\n# D√©finition basique de la classe Rappeur\nclass Rappeur: \n    pass\n\n# D√©finition de l'instance unique menyssa\nmenyssa = Rappeur()  \n\n# menyssa est bien un objet Rappeur\ntype(menyssa) \n\n__main__.Rappeur\n\n\n\n\n\n\n\n\nLe terme __main__\n\n\n\nLe terme __main__ dans Python a une signification sp√©ciale. Il fait r√©f√©rence au nom de l‚Äôespace de noms (ou du ‚Äúscope‚Äù) dans lequel le script courant est ex√©cut√©.\nC‚Äôest une mani√®re pour Python de savoir si le fichier actuel est ex√©cut√© comme script principal ou s‚Äôil est import√© √† partir d‚Äôun autre fichier.*"
  },
  {
    "objectID": "cours/python_poo.html#constructeur-__init__-et-self",
    "href": "cours/python_poo.html#constructeur-__init__-et-self",
    "title": "Gentle introduction √† la Programmation Orient√©e Objets en Python",
    "section": "",
    "text": "Le constructeur __init__ est appel√© automatiquement quand tu cr√©es une nouvelle instance de ta classe.\nSon r√¥le ?\nInitialiser les attributs de ton objet, comme un Directeur Artistique (DA) qui d√©finirait le style et l‚Äôimage de son artiste.\nEt self dans tout √ßa ? C‚Äôest le rappeur lui-m√™me !\nDans une m√©thode, self fait r√©f√©rence √† l‚Äôinstance courante de la classe. C‚Äôest gr√¢ce √† lui que tu peux acc√©der aux attributs et m√©thodes de ton objet.\nQuand tu appelles une m√©thode sur une instance, Python passe automatiquement cette instance en premier argument. C‚Äôest pour √ßa que tu retrouves self partout !\n\n\n\n\n\n\n√Ä Retenir\n\n\n\n\n\ninit et self, permettent de construire et de faire vivre tes objets, comme un DA et son rappeur qui cr√©ent ensemble un personnage unique. :\n\n\ninit est le constructeur qui initialise les attributs\n\n\nself repr√©sente l‚Äôinstance courante dans les m√©thodes\n\n\nEnsemble, ils donnent vie √† tes objets et leur permettent d‚Äôinteragir avec le monde !"
  },
  {
    "objectID": "cours/python_poo.html#attributs",
    "href": "cours/python_poo.html#attributs",
    "title": "Gentle introduction √† la Programmation Orient√©e Objets en Python",
    "section": "",
    "text": "Les attributs en POO, c‚Äôest comme les caract√©ristiques qui d√©finissent un bon rappeur.\nPar exemple pour chaque rappeur on peut lui attribu√© les caract√©ristiques suivantes :\n\nLe flow (self.flow) : c‚Äôest son d√©bit, sa mani√®re de rapper. √áa peut √™tre smooth, agressif, technique‚Ä¶ C‚Äôest ce qui fait son style unique.\nLe nombre d‚Äôalbums (self.nb_albums) : √ßa montre son exp√©rience, comme le nombre de projets sur GitHub pour un dev. Plus t‚Äôen as, plus t‚Äôes respect√© !\nLes featuring (self.featurings) : c‚Äôest les collab avec d‚Äôautres artistes. Comme quand tu fais du pair programming ou que tu participes √† un projet open source.\n\nVoici comment d√©clarer ces attributs dans notre classe ‚ÄúRappeur‚Äù\n\n# D√©finition de la classe Rappeur \nclass Rappeur:\n    # Constructeur de la classe avec les attributs\n    def __init__(self, nom, flow, nb_albums, featurings):\n        self.nom = nom              # Nom du rappeur\n        self.flow = flow            # Style de flow musical du rappeur\n        self.nb_albums = nb_albums  # Nombre total d'albums produits\n        self.featurings = featurings  # Liste des artistes avec lesquels il a collabor√©\n\n# Cr√©ation des instances de la classe Rappeur pour Booba, Vald et Niska.\n# Chaque instance est cr√©√©e avec des d√©tails sp√©cifiques au rappeur.\nbooba = Rappeur(nom=\"Booba\", \n                flow=\"Agressif et technique\",                \n                nb_albums=10,\n                featurings=[\"Kaaris\", \"Damso\", \"Gato\"])\n\nvald = Rappeur(nom=\"Vald\",\n               flow=\"Sombre et introspectif\",\n               nb_albums=6,\n               featurings=[\"Suikon Blaz AD\", \"Damso\"])\n\nniska = Rappeur(nom=\"Niska\", \n                flow=\"M√©lodique et festif\", \n                nb_albums=4, \n                featurings=[\"Booba\", \"SCH\", \"Hamza\"])\n\n# Ici, on affiche le nombre d'albums produits par Niska et le style de Booba.\nprint(f\"Niska a produit {niska.nb_albums} albums et \\n\"\n      f\"le flow de Booba est : {booba.flow}\")\n\n# Ici, on affiche le flow de vald et son nombre d'album.\nprint(f\"\\nVald a produit {vald.nb_albums} albums et son flow est {vald.flow.lower()}\")\n\nNiska a produit 4 albums et \nle flow de Booba est : Agressif et technique\n\nVald a produit 6 albums et son flow est sombre et introspectif"
  },
  {
    "objectID": "cours/python_poo.html#m√©thodes",
    "href": "cours/python_poo.html#m√©thodes",
    "title": "Gentle introduction √† la Programmation Orient√©e Objets en Python",
    "section": "",
    "text": "Les m√©thodes, c‚Äôest ce qui permet √† tes objets d‚Äôagir, d‚Äôinteragir et de se d√©marquer.\nUne m√©thode peut √™tre :\n\nUn flow ‚Äúgetter‚Äù pour r√©cup√©rer des infos (get_punchline())\nUn flow ‚Äúsetter‚Äù pour modifier l‚Äô√©tat (set_style(new_style))\nUn flow ‚Äúcalculateur‚Äù pour traiter des donn√©es (calculer_nb_albums())\nOu m√™me un flow ‚Äúabstract‚Äù pour d√©finir un comportement g√©n√©ral (rapper())\n\nLes m√©thodes, c‚Äôest aussi ce qui permet √† tes objets de communiquer entre eux. Un peu comme des featuring entre rappeurs !\n\n# Importation du module random\nimport random\n\n# D√©finition de la classe Rappeur\nclass Rappeur:\n    # Constructeur de la classe avec les attributs n√©cessaires pour d√©finir un rappeur\n    def __init__(self, nom, flow, nb_albums, featurings, punchlines):\n        self.nom = nom              \n        self.flow = flow            \n        self.nb_albums = nb_albums  \n        self.featurings = featurings  \n        self.punchlines = punchlines  # Liste des punchlines c√©l√®bres du rappeur\n    \n    # M√©thode pour afficher une punchline au hasard\n    def balancer_punchline(self):\n        # Utilisation de random.choice pour s√©lectionner et afficher une punchline al√©atoire de la liste\n        print(f\"{self.nom} balance : {random.choice(self.punchlines)}\")\n\n# Cr√©ation d'une instance Booba\nbooba = Rappeur(nom=\"Booba\", \n                flow=\"Agressif et technique\",                \n                nb_albums=10,\n                featurings=[\"Kaaris\", \"Damso\", \"Gato\"],\n                punchlines=[\"92i\", \"Pitbull\", \"Kalash\"])\n\n# Appel de la m√©thode balancer_punchline pour afficher une punchline de Booba tir√©e au hasard\nbooba.balancer_punchline()\n\nBooba balance : Pitbull\n\n\nMaintenant allons un peu plus long et imaginons un clash entre rappeurs (hihihi!)\n\nimport random  # Importation n√©cessaire pour utiliser random.choice\n\nclass Rappeur:\n    def __init__(self, nom, flow, nb_albums, featurings, punchlines):\n        self.nom = nom  \n        self.flow = flow  \n        self.nb_albums = nb_albums  \n        self.featurings = featurings  \n        self.punchlines = punchlines  \n\n\n    def balancer_punchline(self):\n        print(f\"{self.nom} balance : {random.choice(self.punchlines)}\")\n\n    # M√©thode permettant √† un rappeur de clasher un autre rappeur \n    # en utilisant la premi√®re punchline de sa liste\n    def clasher(self, autre_rappeur):\n        print(f\"{self.nom} clash {autre_rappeur.nom} : {self.punchlines[0]}\")\n        \n    # M√©thode permettant √† un rappeur de r√©pondre √† un \n    # clash avec une punchline sp√©cifique\n    def repondre(self, autre_rappeur, punchline):\n        print(f\"{self.nom} r√©pond √† {autre_rappeur.nom} : {punchline}\")\n\n# Cr√©ation des instances pour Booba et Kaaris\nbooba = Rappeur(nom=\"Booba\", \n                flow=\"Agressif et technique\",                \n                nb_albums=10,\n                featurings=[\"Kaaris\", \"Damso\", \"Gato\"],\n                punchlines=[\"T'es qu'un fils de...\", \"J'vais t'faire une Kalash en live\"])        \n\nkaaris = Rappeur(nom=\"Kaaris\",\n                 flow=\"Aggressif et sombre\",\n                 nb_albums=8,\n                 featurings=[\"Gazo\", \"Kalash Criminel\", \"Hamza\"],\n                 punchlines=[\"J'vais t'faire danser la Zumba\", \"T'es m√™me pas un vrai MC\"])\n\n# Simulation d'un clash entre Booba et Kaaris\nbooba.clasher(kaaris)\nkaaris.repondre(booba, \"T'es qu'un tocard !\")\nbooba.repondre(kaaris, \"TG ! J'suis le DUC !\")\n\nBooba clash Kaaris : T'es qu'un fils de...\nKaaris r√©pond √† Booba : T'es qu'un tocard !\nBooba r√©pond √† Kaaris : TG ! J'suis le DUC !\n\n\nLa puissance des attributs et des m√©thodes r√©sident dans l‚Äôint√©raction de tes objets de mani√®re intuitive et styl√©e.\n\n\n\n\n\n\n√Ä Retenir\n\n\n\n\n\nles attributs et m√©thodes c‚Äôest ce qui donne vie √† tes objets et leur permet de briller sur la sc√®ne de ton programme !\nAlors pour cr√©er des m√©thodes qui claquent, suis ces tips :\n\n\nDonne-leur un nom explicite qui d√©crit bien leur r√¥le\n\n\nUtilise le self pour acc√©der aux attributs et autres m√©thodes de l‚Äôobjet\n\n\nS√©pare bien les responsabilit√©s : une m√©thode = une t√¢che pr√©cise\n\n\nDocumente-les avec des docstrings pour expliquer ce qu‚Äôelles font\n\n\nLa PEP 8 est ton ami !\n\n\n\n\n\n\n\n\n\n\n\nFocus : PEP8 et Annotation de type\n\n\n\n\n\nVoici la m√™me classe avec le code PEP 8 friendly et les annotations de type\n\nfrom typing import List # annoter les attributs featurings et punchlines.\nimport random\nclass Rappeur:\n    \"\"\"Classe d√©finissant un rappeur caract√©ris√© par son nom, style de flow, nombre \n    d'albums, collaborations et punchlines.\n    \"\"\"\n    def __init__(self, nom: str, flow: str, nb_albums: int, featurings: List[str], \n                 punchlines: List[str]):\n        self.nom: str = nom\n        self.flow: str = flow\n        self.nb_albums: int = nb_albums\n        self.featurings: List[str] = featurings\n        self.punchlines: List[str] = punchlines\n\n    def balancer_punchline(self) -&gt; None:\n        \"\"\"Affiche une punchline al√©atoire du rappeur.\"\"\"\n        punchline: str = random.choice(self.punchlines)\n        print(f\"{self.nom} balance : {punchline}\")\n\n    def clasher(self, autre_rappeur: 'Rappeur') -&gt; None:\n        \"\"\"Permet au rappeur de clasher un autre rappeur en utilisant la premi√®re \n        punchline de sa liste.\n        \"\"\"\n        print(f\"{self.nom} clash {autre_rappeur.nom} : {self.punchlines[0]}\")\n        \n    def repondre(self, autre_rappeur: 'Rappeur', punchline: str) -&gt; None:\n        \"\"\"Permet au rappeur de r√©pondre √† un clash avec une punchline sp√©cifique.\"\"\"\n        print(f\"{self.nom} r√©pond √† {autre_rappeur.nom} : {punchline}\")\n\n# Cr√©ation d'instances pour Booba et Kaaris avec typage explicite\nbooba = Rappeur(\n    nom=\"Booba\", \n    flow=\"Agressif et technique\",                \n    nb_albums=10,\n    featurings=[\"Kaaris\", \"Damso\", \"Gato\"],\n    punchlines=[\"T'es qu'un fils de...\", \"J'vais t'faire une Kalash en live\"]\n)        \n\nkaaris = Rappeur(\n    nom=\"Kaaris\",\n    flow=\"Aggressif et sombre\",\n    nb_albums=8,\n    featurings=[\"Gazo\", \"Kalash Criminel\", \"Hamza\"],\n    punchlines=[\"J'vais t'faire danser la Zumba\", \"T'es m√™me pas un vrai MC\"]\n)\n\n# Simulation d'un clash et r√©ponses entre Booba et Kaaris\nbooba.clasher(kaaris)\nkaaris.repondre(booba, \"T'es qu'un tocard !\")\nbooba.repondre(kaaris, \"TG ! J'suis le DUC !\")\n\nBooba clash Kaaris : T'es qu'un fils de...\nKaaris r√©pond √† Booba : T'es qu'un tocard !\nBooba r√©pond √† Kaaris : TG ! J'suis le DUC !"
  },
  {
    "objectID": "cours/python_poo.html#modifier-les-attributs",
    "href": "cours/python_poo.html#modifier-les-attributs",
    "title": "Gentle introduction √† la Programmation Orient√©e Objets en Python",
    "section": "",
    "text": "C‚Äôest essentiel pour g√©rer les interactions entre objets,contr√¥ler l‚Äôacc√®s aux donn√©es et rendre le code plus lisible, comme un rappeur qui adapte son flow √† diff√©rents beats pour cr√©er des sons uniques et puissants. üé§üí™\nComme vu pr√©c√©demment, pour chaque instance de Rappeur, tu peux acc√©der √† ses attributs directement\n\nprint(booba.nom)  \nprint(booba.flow) \n\nBooba\nAgressif et technique\n\n\nPour modifier les attributs, tu assignes simplement une nouvelle valeur.\nPar exemple, si tu veux changer le flow de Booba\n\nbooba.flow = \"Lyrique et complexe\"\nprint(booba.flow)\n\nLyrique et complexe\n\n\nSi tu veux changer une punchline sp√©cifique ou en ajouter une nouvelle\n\nbooba.punchlines[0] = \"Nouvelle punchline plus forte\"\nbooba.punchlines.append(\"Tout le monde sait que j'suis le meilleur\")  \n\nIl est souvent plus judicieux de contr√¥ler la modification des attributs via des m√©thodes au lieu de les modifier directement. Cela offre une meilleure encapsulation (notion que nous verrons apr√®s).\nTu pourrais ajouter une m√©thode comme changer_flow() directement dans ta classe Rappeur\n\nfrom typing import List\nimport random\n\nclass Rappeur:\n    \"\"\"Classe d√©finissant un rappeur caract√©ris√© par son nom, style de flow, nombre \n    d'albums, collaborations et punchlines.\n    \"\"\"\n    def __init__(self, nom: str, flow: str, nb_albums: int, featurings: List[str], \n                 punchlines: List[str]):\n        self.nom: str = nom\n        self.flow: str = flow\n        self.nb_albums: int = nb_albums\n        self.featurings: List[str] = featurings\n        self.punchlines: List[str] = punchlines\n\n    def balancer_punchline(self) -&gt; None:\n        \"\"\"Affiche une punchline al√©atoire du rappeur.\"\"\"\n        punchline: str = random.choice(self.punchlines)\n        print(f\"{self.nom} balance : {punchline}\")\n\n    def clasher(self, autre_rappeur: 'Rappeur') -&gt; None:\n        \"\"\"Permet au rappeur de clasher un autre rappeur en utilisant la premi√®re \n        punchline de sa liste.\n        \"\"\"\n        print(f\"{self.nom} clash {autre_rappeur.nom} : {self.punchlines[0]}\")\n        \n    def repondre(self, autre_rappeur: 'Rappeur', punchline: str) -&gt; None:\n        \"\"\"Permet au rappeur de r√©pondre √† un clash avec une punchline sp√©cifique.\"\"\"\n        print(f\"{self.nom} r√©pond √† {autre_rappeur.nom} : {punchline}\")\n\n    def changer_flow(self, nouveau_flow: str) -&gt; None:\n        \"\"\"Change le flow du rappeur.\"\"\"\n        self.flow = nouveau_flow\n\n# Cr√©ation de l'instance de Booba\nbooba = Rappeur(\n    nom=\"Booba\", \n    flow=\"Agressif et technique\",                \n    nb_albums=10,\n    featurings=[\"Kaaris\", \"Damso\", \"Gato\"],\n    punchlines=[\"T'es qu'un fils de...\", \"J'vais t'faire une Kalash en live\"]\n)\n\n# Affichage du flow avant la modification\nprint(\"Flow avant : \", booba.flow)\n\n# Modification du flow\nbooba.changer_flow(\"Po√©tique et introspectif\")\n\n# Affichage du flow apr√®s la modification\nprint(\"Flow apr√®s : \", booba.flow)\n\nFlow avant :  Agressif et technique\nFlow apr√®s :  Po√©tique et introspectif\n\n\n\n\n\n\n\n\nToute variable n‚Äôest pas un attribut\n\n\n\nL‚Äôattribut nouveau_flow n‚Äô√©tait pas n√©cessaire dans le constructeur de la classe. Pour changer le flow, il est plus appropri√© d‚Äôutiliser une m√©thode d√©di√©e.\nExplication : Le constructeur d‚Äôune classe est g√©n√©ralement utilis√© pour initialiser les attributs qui d√©finissent l‚Äô√©tat de base d‚Äôune instance. nouveau_flow est plus une action ponctuelle qu‚Äôun attribut d‚Äô√©tat permanent de l‚Äôobjet. Avoir un attribut initial pour flow est logique car il d√©crit une propri√©t√© de l‚Äôinstance de Rappeur. En revanche, nouveau_flow ressemble plus √† une valeur temporaire utilis√©e pour modifier flow.*\n\n\nEn suivant ces √©tapes, tu peux efficacement g√©rer et mettre √† jour les attributs de tes instances de Rappeur, ce qui te permet de maintenir ton code organis√© et tes donn√©es √† jour.\nVoil√† les gars, vous savez maintenant comment g√©rer les attributs de vos rappeurs comme des pros !\nMaintenant TIME TO PRACTICE ! üí™"
  },
  {
    "objectID": "cours/python_poo.html#exercices",
    "href": "cours/python_poo.html#exercices",
    "title": "Gentle introduction √† la Programmation Orient√©e Objets en Python",
    "section": "",
    "text": "Je t‚Äôai concoct√© une s√©rie d‚Äôexercices passionnants üåü qui te permettront non seulement de cr√©er de nouvelles classes, mais aussi de (re)d√©couvrir des notions essentielles de la programmation Python üêç.\nCes exercices sont sp√©cialement con√ßus pour booster ta compr√©hension des principes de la programmation orient√©e objet üîÑ, tout en te donnant l‚Äôoccasion de manipuler des attributs, de g√©rer des m√©thodes, et d‚Äôexplorer des interactions complexes entre objets.\nBonne courage et surtout, prends du plaisir en codant ! üöÄ‚ú®\n\n\n\n\nCr√©e une classe Rappeur avec les attributs suivants :\n\nnom : le nom du rappeur.\nflow : une description du style de flow du rappeur.\nalbums : une liste des noms d‚Äôalbums du rappeur.\n\nLa classe doit aussi inclure une m√©thode introduction() qui affiche une phrase d√©crivant le rappeur et une m√©thode sortir_album() qui prend le nom d‚Äôun nouvel album et l‚Äôajoute √† la liste des albums.\n\n\n\n\n\n\nConseil\n\n\n\nPour la m√©thode sortir_album(), assure-toi de v√©rifier que l‚Äôalbum n‚Äôest pas d√©j√† dans la liste avant de l‚Äôajouter. Cela √©vitera les doublons dans la discographie du rappeur.\n\n\n\n\n\n\n\n\nCr√©e une classe Livre avec les attributs suivants :\n\ntitre : le titre du livre.\nauteur : l‚Äôauteur du livre.\n\nLa classe doit inclure des m√©thodes pour :\n\nD√©finir un premier livre num√©rique et afficher ses informations.\nMettre √† jour le titre et l‚Äôauteur d‚Äôun livre.\nAfficher les d√©tails d‚Äôun livre.\n\n\n\n\n\n\n\nConseil\n\n\n\nLorsque tu modifies les attributs d‚Äôun livre, pense √† utiliser des m√©thodes de getter et de setter. Cela te permet de contr√¥ler comment les attributs sont mis √† jour et de valider les donn√©es si n√©cessaire.\n\n\n\n\n\n\n\n\nCr√©e une classe Account avec les attributs suivants :\n\nsolde : le solde initial du compte.\n\nLa classe doit inclure des m√©thodes pour :\n\nD√©poser des fonds sur le compte.\nRetirer des fonds du compte.\nAppliquer un taux d‚Äôint√©r√™t au solde du compte.\n\n\n\n\n\n\n\nConseil\n\n\n\nTeste scrupuleusement les m√©thodes de d√©p√¥t et de retrait pour g√©rer correctement les sc√©narios o√π le compte pourrait devenir n√©gatif. Ajoute des conditions pour emp√™cher le retrait de fonds sup√©rieurs au solde disponible.\n\n\n\n\n\n\n\n\nCr√©e une classe CompteBancaire avec les attributs suivants :\n\nidentifiant : l‚Äôidentifiant du compte.\nnom_proprietaire : le nom du propri√©taire du compte.\nsolde : le solde initial du compte.\n\nLa classe doit inclure des m√©thodes pour :\n\nG√©rer les d√©p√¥ts et les retraits, en appliquant des agios en cas de d√©couvert.\nAfficher tous les d√©tails du compte.\n\n\n\n\n\n\n\nConseil\n\n\n\nPour g√©rer les d√©couverts, envisage d‚Äôajouter un attribut qui d√©finit un d√©couvert maximum autoris√©. Cela rendra la gestion du compte plus flexible et r√©aliste.\n\n\n\n\n\n\n\n\nAm√©liore la classe Rappeur pour inclure un attribut collaborations, qui est une liste de tuples. Chaque tuple contient le nom d‚Äôun autre rappeur et le titre de la chanson sur laquelle ils ont collabor√©.\nLa classe doit inclure des m√©thodes pour :\n\nAjouter une collaboration √† la liste des collaborations.\nAfficher toutes les collaborations du rappeur.\n\n\n\n\n\n\n\nConseil\n\n\n\nQuand tu ajoutes des collaborations, assure-toi de v√©rifier si la collaboration existe d√©j√† pour √©viter les entr√©es en double. Cela peut √™tre fait en v√©rifiant si le tuple (rappeur, titre de la chanson) est d√©j√† dans la liste des collaborations.\n\n\n\n\n\n\n\n\nCr√©e une classe Carte avec les attributs suivants :\n\nvaleur : la valeur de la carte.\nnom : le nom de la carte.\n\nCr√©e une classe Paquet avec les attributs suivants :\n\ncartes : la liste des cartes du paquet.\n\nLa classe Paquet doit inclure des m√©thodes pour :\n\nM√©langer le paquet de cartes.\nDistribuer les cartes √©quitablement entre les joueurs.\n\nCr√©e une classe Joueur avec les attributs suivants :\n\nmain : la main du joueur.\n\nLa classe Joueur doit inclure des m√©thodes pour :\n\nPr√©parer la main du joueur pour la bataille.\n\nCr√©e une classe Tournoi avec les attributs suivants :\n\njoueurs : la liste des joueurs participants.\n\nLa classe Tournoi doit inclure des m√©thodes pour :\n\nD√©rouler la bataille entre les joueurs.\nD√©clarer le gagnant du tournoi.\n\n\n\n\n\n\n\nConseil\n\n\n\nPour la distribution des cartes, assure-toi que le m√©lange soit complet avant de distribuer les cartes afin d‚Äôassurer l‚Äô√©quit√© du jeu. Utilise des m√©thodes robustes pour g√©rer les √©galit√©s et les cas sp√©ciaux o√π plusieurs tours de cartes sont n√©cessaires.\n\n\n\n\n\n\n\n\nCr√©e une classe Battle avec les attributs suivants : * rappeur1 : le premier rappeur participant. * rappeur2 : le deuxi√®me rappeur participant.\nLa classe Battle doit inclure des m√©thodes pour : * Faire s‚Äôaffronter les deux rappeurs en affichant leurs punchlines et d√©terminer le gagnant. * Afficher le gagnant de la bataille et sa punchline gagnante.\nBonus : Impl√©mente une m√©thode juger_punchline(punchline) dans la classe Rappeur qui attribue un score √† une punchline bas√© sur des crit√®res comme la rime, le nombre de syllabes, ou d‚Äôautres aspects stylistiques que tu juges importants.\n\n\n\n\n\n\nConseil\n\n\n\nDans la m√©thode juger_punchline(punchline), consid√®re d‚Äôutiliser des techniques d‚Äôanalyse de texte pour √©valuer les punchlines, comme compter les syllabes ou utiliser des expressions r√©guli√®res pour identifier les rimes et autres figures de style."
  },
  {
    "objectID": "cours/python_poo.html#correction",
    "href": "cours/python_poo.html#correction",
    "title": "Gentle introduction √† la Programmation Orient√©e Objets en Python",
    "section": "",
    "text": "La correction sera disponible prochainement ;)\n\n\nPlus de cours\n\n\n\n\n\n√Ä propos des auteurs\n\nM√©nyssa Cherifa-Luron, PhD est data scientist et formatrice freelance.\n\n\n\n\n\nCopyright and licence\n\n¬© 2024, M√©nyssa Cherifa-Luron\n\n\n \n\n\t\n\t\n\n\n\n\t\n\t\n\t\t\n\t\n\n\n\n\t\n\t\n\t\t\n\t\n\n Ce cours est sous licence Creative Commons Attribution-NonCommercial 4.0 (CC BY-NC 4.0)  International licence.\n\n\n\nCiter ce cours :\n\nM√©nyssa Cherifa-Luron. ‚ÄúGentle introduction √† la Programmation Orient√©e Objets en Python‚Äù. DAMA, 23/05/2024. Disponible ici"
  },
  {
    "objectID": "cours/index.html",
    "href": "cours/index.html",
    "title": "  Cours disponibles",
    "section": "",
    "text": "Collaboration\n\n\n\n\n\nTu es d√©j√† expert.e et tu souhaites r√©diger un article ou cr√©er un cours ? Tu adh√®res √† l‚Äôesprit Open Learning Source ?\nC‚Äôest avec plaisir, parce que j‚Äôaime les featurings ! Si √ßa te dit envoie moi un petit mail √† damaestla@gmail.com ou contacte moi directement sur LinkedIn et commence √† r√©diger avec les templates articles et cours.\n\n\n\n\n    Cours disponibles\n   Choisis le cours qui t'int√©resse et c'est parti !\n\n\n\n  \n    \n      \n        \n        \n          R : Introduction √† la programmation\n        \n        \n          Niveau : d√©butant\n        \n      \n    \n\n    \n      \n        \n        \n          Python : Introduction √† la programmation\n        \n        \n          Niveau : d√©butant\n        \n      \n    \n\n    \n      \n        \n        \n          R Shiny : D√©ployer des applications web avec R \n        \n        \n          Niveau : Interm√©diaire\n        \n      \n    \n\n    \n      \n        \n        \n          Python : Programmation orient√©e objets\n        \n        \n          Niveau : Interm√©diaire\n        \n      \n    \n  \n\n\n\n\n Retour au sommet"
  },
  {
    "objectID": "blog/posts/guide_redaction.html",
    "href": "blog/posts/guide_redaction.html",
    "title": "Guide de R√©daction d‚Äôun article aux petits oignons",
    "section": "",
    "text": "F√©licitations ! En lisant cet article, tu fais le premier pas pour devenir un¬∑e excellent¬∑e vulgarisateur¬∑rice. Que tu souhaites partager tes connaissances en data science, en histoire ou en jardinage, les conseils qui suivent t‚Äôaideront √† √©crire des articles clairs, captivants et m√©morables.\nShall we begin?"
  },
  {
    "objectID": "blog/posts/guide_redaction.html#conseils-pour-un-article-r√©ussi",
    "href": "blog/posts/guide_redaction.html#conseils-pour-un-article-r√©ussi",
    "title": "Guide de R√©daction d‚Äôun article aux petits oignons",
    "section": "7 conseils pour un article r√©ussi",
    "text": "7 conseils pour un article r√©ussi\n\n1. Concentre-toi sur une id√©e principale\n\nTon article se focalise-t-il sur un seul message cl√© ?\nPeux-tu r√©sumer l‚Äôid√©e directrice en une phrase ?\n\nConstruis ton article autour d‚Äôun concept central que tu veux absolument transmettre √† ton lecteur. √âvite de te disperser.\n\n\n\n\n\n\nConseil : R√©sume ton id√©e principale en une phrase percutante. Ce sera le fil rouge de ton article.\n\n\n\n\n\n2. Pense √† ce qui int√©resse ton audience\n\nTon article r√©pond-il √† la question ‚ÄúEn quoi est-ce utile/int√©ressant pour mes lecteurs ?‚Äù\nApportes-tu de la valeur en r√©pondant √† leurs questions, en les √©duquant ou en les divertissant ?\n\nMets-toi √† la place de tes lecteurs cibles. Ton article doit leur parler et leur apporter quelque chose de concret.\n\n\n3. Captive d√®s les premi√®res lignes\n\nTon intro accroche-t-elle le lecteur efficacement ?\nDonne-t-elle envie de lire la suite ?\n\nSoigne particuli√®rement ton introduction. Utilise une anecdote, pose une question, cite une stat qui interpelle‚Ä¶ Sois cr√©atif pour donner envie de poursuivre la lecture.\n\n\n4. Adopte un langage clair et accessible\n\nTon vocabulaire est-il compr√©hensible par tous, sans jargon ?\nTes phrases sont-elles courtes et limpides ?\nAs-tu bien vulgaris√© les notions techniques ?\n\nTon objectif est de d√©mocratiser ton sujet. √âvite les termes abscons, explique les concepts, fais des analogies avec des choses connues de tous.\n\n\n5. Raconte une histoire\n\nTon article raconte-t-il une histoire avec un d√©but, un milieu et une fin ?\nUtilises-tu des exemples concrets et des anecdotes pour illustrer tes propos ?\n\nLes meilleurs articles sont ceux qui racontent une histoire et font vivre une exp√©rience au lecteur. Rends ton sujet vivant et tangible.\n\n\n6. Fais na√Ætre des √©motions\n\nTon article suscite-t-il des √©motions (curiosit√©, surprise, amusement‚Ä¶) ?\nUtilises-tu l‚Äôhumour avec parcimonie et √†-propos ?\n\nL‚Äô√©motion permet de capter l‚Äôattention et de mieux m√©moriser. Fais sourire, √©tonner ou r√©fl√©chir ton lecteur.\n\n\n7. Relis et raccourcis\n\nAs-tu relu ton article √† voix haute pour v√©rifier qu‚Äôil est fluide et plaisant √† lire ?\nAs-tu √©limin√© les longueurs et d√©tails superflus (vise -10% √† chaque relecture) ?\n\nSois impitoyable lors de tes relectures. Chaque mot doit avoir son utilit√©. Supprime les fioritures, va √† l‚Äôessentiel pour tenir ton lecteur en haleine jusqu‚Äôau bout."
  },
  {
    "objectID": "blog/posts/guide_redaction.html#r√®gles-√†-respecter",
    "href": "blog/posts/guide_redaction.html#r√®gles-√†-respecter",
    "title": "Guide de R√©daction d‚Äôun article aux petits oignons",
    "section": "5 r√®gles √† respecter",
    "text": "5 r√®gles √† respecter\n\n1. Respecte les r√®gles de base de l‚Äôorthographe et de la grammaire\n\nAs-tu relu attentivement ton article pour traquer les fautes ?\nAs-tu utilis√© un correcteur orthographique et grammatical ?\n\nUne orthographe et une grammaire irr√©prochables sont indispensables pour assurer ta cr√©dibilit√©. Fais tr√®s attention aux accords, conjugaisons, homophones, etc.\n\n\n2. Suis une structure d‚Äôarticle logique et coh√©rente\n\nTon article est-il bien structur√© avec une intro, un d√©veloppement et une conclusion ?\n\nTes id√©es s‚Äôencha√Ænent-elles de fa√ßon fluide et logique ?\n\nUn plan clair et une progression coh√©rente des id√©es permettront au lecteur de bien suivre ton raisonnement du d√©but √† la fin.\n\n\n3. Cite tes sources\n\nAs-tu cit√© les sources des chiffres, √©tudes et affirmations cl√©s ?\nAs-tu v√©rifi√© la fiabilit√© de tes sources ?\n\nPour √™tre cr√©dible, appuie-toi sur des sources s√©rieuses et reconnues que tu cites explicitement. √âvite les sources douteuses ou non v√©rifi√©es.\n\n\n4. Illustre avec des graphiques, sch√©mas, images\n\nAs-tu ins√©r√© des √©l√©ments visuels pertinents pour illustrer tes propos ?\nTes visuels sont-ils clairs, lisibles et bien l√©gend√©s ?\n\nRien de tel que des graphiques et sch√©mas pour pr√©senter des donn√©es et concepts de fa√ßon parlante. Choisis-les judicieusement.\n\n\n5. Fais relire ton article\n\nAs-tu fait relire ton article par au moins 2 personnes ?\nAs-tu bien pris en compte leurs retours ?\n\nAvant publication, fais relire ton article par des personnes de confiance, si possible √† la fois des experts et des n√©ophytes. Leurs retours t‚Äôaideront √† l‚Äôam√©liorer."
  },
  {
    "objectID": "blog/posts/guide_redaction.html#checklist-avant-publication",
    "href": "blog/posts/guide_redaction.html#checklist-avant-publication",
    "title": "Guide de R√©daction d‚Äôun article aux petits oignons",
    "section": "Checklist avant publication",
    "text": "Checklist avant publication\n\n\n\n\n\n\n\nTon article se concentre sur une id√©e principale\nIl est utile et int√©ressant pour ton audience\nL‚Äôintro accroche et donne envie de lire\n\nLe langage est clair et accessible √† tous\nTu racontes une histoire, avec des exemples\nL‚Äôarticle suscite des √©motions\nTu as relu et raccourci au maximum\nL‚Äôorthographe et la grammaire sont correctes\nLa structure est logique et fluide\nLes sources sont cit√©es\n\nLes visuels sont pertinents et lisibles\nTu as fait relire l‚Äôarticle et int√©gr√© les retours"
  },
  {
    "objectID": "blog/posts/guide_redaction.html#conclusion",
    "href": "blog/posts/guide_redaction.html#conclusion",
    "title": "Guide de R√©daction d‚Äôun article aux petits oignons",
    "section": "Conclusion",
    "text": "Conclusion\nF√©licitations d‚Äôavoir lu ce guide jusqu‚Äôau bout ! Tu as maintenant en main toutes les cl√©s pour √©crire des articles passionnants qui transmettent efficacement tes connaissances.\nN‚Äôoublie pas l‚Äôessentiel : choisis un sujet qui te tient √† c≈ìur, structure bien tes id√©es, √©cris avec clart√© et sinc√©rit√©. Tes lecteurs ne s‚Äôy tromperont pas.\nAlors lance-toi, √©cris, partage ! Le monde a besoin de ton savoir.\nBonne r√©daction !\n\n\nPlus d‚Äôarticles ici\n\n\n\n\n\n√Ä propos des auteurs\n\nM√©nyssa Cherifa-Luron, PhD est data scientist et formatrice freelance.\n\n\n\n\n\nCopyright and licence\n\n¬© 2024, M√©nyssa Cherifa-Luron\n\n\n  Cet article est sous licence Creative Commons Attribution-NonCommercial 4.0 (CC BY-NC 4.0)  International licence.\n\n\n\nCiter cet article :\n\nM√©nyssa Cherifa-Luron. ‚ÄúGuide de R√©daction d‚Äôun article aux petits oignons‚Äù DAMA, 23/05/2024. URL"
  },
  {
    "objectID": "blog/article_template.html",
    "href": "blog/article_template.html",
    "title": "Titre",
    "section": "",
    "text": "Pour r√©diger l‚Äôarticle vous pouvez utiliser toute la syntaxe markdown"
  },
  {
    "objectID": "blog/article_template.html#un-paragraphe",
    "href": "blog/article_template.html#un-paragraphe",
    "title": "Titre",
    "section": "un paragraphe",
    "text": "un paragraphe"
  },
  {
    "objectID": "blog/article_template.html#deux-paragraphe",
    "href": "blog/article_template.html#deux-paragraphe",
    "title": "Titre",
    "section": "deux paragraphe",
    "text": "deux paragraphe\n\nsous paragraphe\n\nsous-sous paragraphe\n\n\nPlus d‚Äôarticle ici\n\n\n\n\n\n√Ä propos des auteurs\n\nAuteur1 est ‚Ä¶\n\n\nAuteur2 est ‚Ä¶ :‚Ä¶\n\n\n\n\n\nCopyright and licence\n\n¬© ann√©e, Auteur\n\n\n  Cet article est sous licence Creative Commons Attribution-NonCommercial 4.0 (CC BY-NC 4.0)  International licence.\n\n\n\nCiter cet article :\n\nAuteur1, Auteur2 et al 2024. ‚ÄúTitre‚Äù DAMA, date. URL"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": " Qui suis-je ?",
    "section": "",
    "text": "Salut, üëã moi, c'est M√©nyssa, ta formatrice principale en data science. Je suis passionn√©e par la transformation des donn√©es ennuyeuses en histoires captivantes ‚Äì un peu comme un chef qui transforme des pois chiches en steak !\n    J'aime l'id√©e de rendre la data science facile et accessible √† tous et toutes, c'est pour cela que j'ai cr√©√© ce site et que je partage du contenu sur  LinkedIn ."
  },
  {
    "objectID": "about.html#mini-cours",
    "href": "about.html#mini-cours",
    "title": " Qui suis-je ?",
    "section": " Mini-cours",
    "text": "Mini-cours\n\n  Retrouve ici les derniers mini-cours que je poste r√©guli√®rement sur LinkedIn.  Check this out üëá\n\n\n\n  \n    \n  \n  \n    \n     \n  \n    \n  \n\n\n  Tu aimes ? Ne loupe rien et viens me suivre sur LinkedIn !\n  \n     Me suivre ! üöÄ\n  \n\n\n  \n     Ma mission\n    Je crois fermement que la data science ne devrait pas √™tre r√©serv√©e √† une √©lite. Mon objectif est de d√©mocratiser ce domaine passionnant et de donner √† chacun les cl√©s pour comprendre et utiliser la data, quel que soit son niveau de d√©part.\n  \n  \n     Mon approche\n    J'ai √† c≈ìur de proposer des contenus de qualit√©, √† la fois rigoureux et ludiques. Pas de jargon incompr√©hensible ici, juste des explications claires et des exemples concrets pour t'aider √† progresser pas √† pas.\n  \n\n\n   Collaborons ensemble !\n  Tu as une expertise √† partager ? Une id√©e de cours ou d'article ?  \n  Je suis toujours ravie de collaborer avec d'autres passionn√©s pour cr√©er des contenus toujours plus enrichissants. \n  N'h√©site pas √† me contacter, et construisons ensemble le futur de la data science accessible !\n  Me contacter"
  },
  {
    "objectID": "coding_session_ind.html",
    "href": "coding_session_ind.html",
    "title": "\n    Coder facile avec DAMA",
    "section": "",
    "text": "Des coding sessions sur mesure, parce que tu es unique et que"
  },
  {
    "objectID": "coding_session_ind.html#la-data-science-sur-mesure-rien-que-pour-toi",
    "href": "coding_session_ind.html#la-data-science-sur-mesure-rien-que-pour-toi",
    "title": "\n    Coder facile avec DAMA",
    "section": " La data science sur-mesure, rien que pour toi",
    "text": "La data science sur-mesure, rien que pour toi\nFini les formations taille unique qui te laissent sur ta faim. Il est temps de passer au niveau sup√©rieur avec un apprentissage 100% personnalis√©.\nImagine-toi dans quelques mois :\n\nMa√Ætriser les langages de programmation les plus demand√©s en data science\nApprivoiser les algorithmes de machine learning les plus puissants\nBooster ton CV et d√©crocher le job de tes r√™ves\nDevenir l‚Äôexpert(e) en data science dont les entreprises ont besoin\n\n√áa en jette, pas vrai ? Et si je te disais que c‚Äôest possible‚Ä¶ √† condition d‚Äôavoir la bonne feuille de route ?"
  },
  {
    "objectID": "coding_session_ind.html#pourquoi-mes-sessions-sont-diff√©rentes",
    "href": "coding_session_ind.html#pourquoi-mes-sessions-sont-diff√©rentes",
    "title": "\n    Coder facile avec DAMA",
    "section": " Pourquoi mes sessions sont diff√©rentes ?",
    "text": "Pourquoi mes sessions sont diff√©rentes ?\nParce qu‚Äôelles sont 100% personnalis√©es en fonction de TON niveau, TES objectifs et TON rythme d‚Äôapprentissage. Fini les formations √† la cha√Æne qui te laissent sur ta faim.\nAvec moi, tu auras :\n\nüë®‚Äçüè´ Un suivi individuel avec un expert passionn√© via un espace notion personnalis√©*\nüéØ Un programme sur mesure align√© avec tes objectifs\nüïí Un rythme flexible adapt√© √† tes disponibilit√©s\nüöÄ Des projets concrets pour muscler ton portfolio"
  },
  {
    "objectID": "coding_session_ind.html#comment-√ßa-marche",
    "href": "coding_session_ind.html#comment-√ßa-marche",
    "title": "\n    Coder facile avec DAMA",
    "section": " Comment √ßa marche ?",
    "text": "Comment √ßa marche ?\nEn 4 √©tapes, tu seras sur le chemin de la r√©ussite !\n\nInstalle  VS code et l‚Äôextention Visual Studio Live Share\nChoisis ton arme secr√®te : R, Python, SQL‚Ä¶ √† toi de d√©cider ce qui te fera d√©coller !\nR√©serve ton cr√©neau : Quelques clics sur mon site et hop, ta place est r√©serv√©e. Facile comme bonjour !\nConnecte-toi et code en live avec moi : On se retrouve sur Cal et on code ensemble en temps r√©el avec VS Code Live Share."
  },
  {
    "objectID": "coding_session_ind.html#ce-que-tu-gagnes-en-r√©servant-maintenant-attention-√ßa-va-√™tre-dur-de-r√©sister",
    "href": "coding_session_ind.html#ce-que-tu-gagnes-en-r√©servant-maintenant-attention-√ßa-va-√™tre-dur-de-r√©sister",
    "title": "\n    Coder facile avec DAMA",
    "section": " Ce que tu gagnes en r√©servant maintenant (attention, √ßa va √™tre dur de r√©sister !)",
    "text": "Ce que tu gagnes en r√©servant maintenant (attention, √ßa va √™tre dur de r√©sister !)\n\n60 minutes de coaching en t√™te-√†-t√™te avec moi, 100% adapt√©es √† TES besoins\nUn environnement de codage partag√© en live, pour progresser √† vitesse grand V\nMes conseils et astuces d‚Äôexpert pour t‚Äôaider √† atteindre tes objectifs en un temps record\nDes r√©ponses √† TOUTES tes questions de codage (m√™me les plus tordues, promis !)\nDes ressources exclusives en bonus pour cimenter tes acquis et faire de toi un(e) pro"
  },
  {
    "objectID": "coding_session_ind.html#tarifs-et-packs-cest-maintenant-ou-jamais",
    "href": "coding_session_ind.html#tarifs-et-packs-cest-maintenant-ou-jamais",
    "title": "\n    Coder facile avec DAMA",
    "section": " Tarifs et packs, c‚Äôest maintenant ou jamais !",
    "text": "Tarifs et packs, c‚Äôest maintenant ou jamais !\nJe crois en la valeur de mon expertise et je veux te la transmettre dans la bonne humeur.\n\n  \n    \n      \n        Call Boost\n        Session d'1h\n        65‚Ç¨ - Boost sur-mesure pour r√©soudre un probl√®me pr√©cis.\n        R√©serve ta session ! üöÄ\n      \n    \n  \n\n  \n    \n      \n        Data Dive\n        Pack 3 sessions\n        150‚Ç¨ 195‚Ç¨ - Id√©al pour creuser un sujet √† fond et progresser √† vitesse grand V. \n         Obtiens ton pack ! üöÄ\n      \n    \n  \n\n  \n    \n      \n        Data Odyssey\n        Pack de 10 sessions\n        500‚Ç¨ 650‚Ç¨ - L'option parfaite pour un v√©ritable parcours de mont√©e en comp√©tences.\n         Obtiens ton super pack ! üöÄ\n      \n    \n  \n\nLes tarifs canon de mes partenaires experts : j‚Äôai une √©quipe de choc √† mes c√¥t√©s, pr√™te √† t‚Äôaccompagner √† des tarifs ultra-sympas √† partir de 30‚Ç¨ de l‚Äôheure."
  },
  {
    "objectID": "coding_session_ind.html#les-places-partent-√†-la-vitesse-de-l√©clair-r√©serve-la-tienne-maintenant",
    "href": "coding_session_ind.html#les-places-partent-√†-la-vitesse-de-l√©clair-r√©serve-la-tienne-maintenant",
    "title": "\n    Coder facile avec DAMA",
    "section": " Les places partent √† la vitesse de l‚Äô√©clair, r√©serve la tienne maintenant !",
    "text": "Les places partent √† la vitesse de l‚Äô√©clair, r√©serve la tienne maintenant !\nT‚Äôes √† deux doigts de faire d√©coller ta carri√®re en data science. Ne laisse pas passer cette occasion en or ! Choisis vite ton langage pr√©f√©r√©, ton cr√©neau, r√®gle en ligne et let‚Äôs go ! Je t‚Äôattends avec impatience.\n\n R√©server mon cours ! üöÄ \n\nTu as encore des questions ? Tu veux en savoir plus sur mon approche ? √âcris-moi ici, je me ferai un plaisir de te r√©pondre !\n\n* Le Data Science Launch Pad est un espace en ligne qui rassemble les meilleures ressources et un parcours structur√© pour aider les d√©butants √† se lancer en data science. Il propose une feuille de route d‚Äôapprentissage, une base de connaissances, des id√©es de projets pratiques et un suivi de progression personnalis√©. Disponible uniquement pour le parcours Data Odyssey"
  },
  {
    "objectID": "cours/python_intro.html",
    "href": "cours/python_intro.html",
    "title": "Python : Introduction √† la programmation",
    "section": "",
    "text": "Si tu as d√©j√† des notions avanc√©es en prog Python, passe directement √† la programmation orient√©e objets\nSinon, si tu es l√† c‚Äôest que tu veux apprendre Python, et que tu me fais confiance pour √™tre ta formatrice ! Alors MERCI !!\nAvant de commencer ta lecture du cours, note que le texte dans une cellule noir, chunk, repr√©sente du code python. En dessous de chaque chunk, tu trouveras le r√©sultat de correspondant √† l‚Äôex√©cution des intructions contenues dans le chunk.\nVoil√† c‚Äôest tout. Let‚Äôs go !"
  },
  {
    "objectID": "cours/python_intro.html#installation-sur-windows",
    "href": "cours/python_intro.html#installation-sur-windows",
    "title": "Python : Introduction √† la programmation",
    "section": "2.1 Installation sur Windows",
    "text": "2.1 Installation sur Windows\n\nT√©l√©charger l‚Äôinstallateur :\n\nRends-toi sur le site officiel de Python √† l‚Äôadresse python.org.\nClique sur le bouton ‚ÄúDownload Python‚Äù (assure-toi de choisir la version la plus r√©cente).\n\nEx√©cuter l‚Äôinstallateur :\n\nUne fois le fichier t√©l√©charg√©, ouvre-le.\nCoche la case ‚ÄúAdd Python to PATH‚Äù (tr√®s important pour pouvoir utiliser Python depuis la ligne de commande).\nClique sur ‚ÄúInstall Now‚Äù.\n\nV√©rifier l‚Äôinstallation :\n\nOuvre l‚Äôinvite de commandes (Windows + R, tape cmd et appuie sur Entr√©e).\nTape python --version et appuie sur Entr√©e. Tu devrais voir la version de Python s‚Äôafficher, confirmant ainsi que Python est install√© correctement."
  },
  {
    "objectID": "cours/python_intro.html#installation-sur-macos",
    "href": "cours/python_intro.html#installation-sur-macos",
    "title": "Python : Introduction √† la programmation",
    "section": "2.2 Installation sur macOS",
    "text": "2.2 Installation sur macOS\n\nT√©l√©charger l‚Äôinstallateur :\n\nRendez-toi sur le site officiel de Python √† l‚Äôadresse python.org.\nClique sur le bouton ‚ÄúDownload Python‚Äù (assure-toi de choisir la version la plus r√©cente).\n\nEx√©cuter l‚Äôinstallateur :\n\nOuvre le fichier t√©l√©charg√©.\nSuis les instructions √† l‚Äô√©cran pour installer Python.\n\nV√©rifier l‚Äôinstallation :\n\nOuvre le Terminal (Applications &gt; Utilitaires &gt; Terminal).\nTape python3 --version et appuie sur Entr√©e. Tu devrais voir la version de Python s‚Äôafficher, confirmant ainsi que Python est install√© correctement."
  },
  {
    "objectID": "cours/python_intro.html#installation-sur-linux",
    "href": "cours/python_intro.html#installation-sur-linux",
    "title": "Python : Introduction √† la programmation",
    "section": "2.3 Installation sur Linux",
    "text": "2.3 Installation sur Linux\nLa plupart des distributions Linux incluent Python par d√©faut. Toutefois, tu peux installer ou mettre √† jour Python en suivant ces √©tapes :\n\nMettre √† jour la liste des paquets :\n\nOuvre un terminal.\nTape sudo apt update (pour les syst√®mes bas√©s sur Debian/Ubuntu) ou sudo yum update (pour les syst√®mes bas√©s sur Red Hat/Fedora) et appuie sur Entr√©e.\n\nInstaller Python :\n\nPour les syst√®mes bas√©s sur Debian/Ubuntu : sudo apt install python3\nPour les syst√®mes bas√©s sur Red Hat/Fedora : sudo yum install python3\n\nV√©rifier l‚Äôinstallation :\n\nTape python3 --version et appuie sur Entr√©e. Tu devrais voir la version de Python s‚Äôafficher, confirmant ainsi que Python est install√© correctement."
  },
  {
    "objectID": "cours/python_intro.html#installation-dun-√©diteur-de-code",
    "href": "cours/python_intro.html#installation-dun-√©diteur-de-code",
    "title": "Python : Introduction √† la programmation",
    "section": "2.4 Installation d‚Äôun √©diteur de code",
    "text": "2.4 Installation d‚Äôun √©diteur de code\nPour √©crire du code en Python, tu auras besoin d‚Äôun √©diteur de code ou d‚Äôun environnement de d√©veloppement int√©gr√© (IDE). Voici quelques recommandations :\n\nVS Code : Gratuit et tr√®s populaire. Tu peux le t√©l√©charger depuis code.visualstudio.com.\nPyCharm : Sp√©cialis√© pour Python, disponible en versions gratuite (Community) et payante (Professional). T√©l√©charge-le depuis jetbrains.com/pycharm.\nJupyter Notebook : Id√©al pour les scientifiques des donn√©es. Installe-le avec pip install notebook."
  },
  {
    "objectID": "cours/python_intro.html#teste-ton-installation",
    "href": "cours/python_intro.html#teste-ton-installation",
    "title": "Python : Introduction √† la programmation",
    "section": "2.5 Teste ton installation",
    "text": "2.5 Teste ton installation\nPour v√©rifier que tout fonctionne correctement, ouvre ton √©diteur de code ou ton terminal, ouvre un script et tape le code suivant :\nprint(\"Hello, World!\")\nSi tu vois s‚Äôafficher Hello, World!, f√©licitations ! Tu es pr√™t √† commencer ton aventure en Python. üöÄ\nMaintenant que Python est install√© sur ton ordinateur, passons aux commentaires."
  },
  {
    "objectID": "cours/python_intro.html#types-de-variables",
    "href": "cours/python_intro.html#types-de-variables",
    "title": "Python : Introduction √† la programmation",
    "section": "4.1 Types de variables",
    "text": "4.1 Types de variables\nEn Python, chaque variable a un type bien pr√©cis. C‚Äôest un peu comme les groupes sanguin : A, B, AB ou O. Sauf qu‚Äôici, on a :\n\nLes entiers (int) : pour les nombres sans virgule. Exemples : 5, -3, 0.\nLes nombres complexes (complex) : pour les maths de l‚Äôespace ! Exemple : 3 + 4j.\nLes flottants (float) : pour les nombres √† virgule. Exemples : 3.14, -0.001.\nLes cha√Ænes de caract√®res (str) : pour le texte, entour√© de guillemets. Exemple : ‚ÄúHello World!‚Äù\nLes bool√©ens (bool) : pour les valeurs ‚Äúvrai‚Äù (True) ou ‚Äúfaux‚Äù (False). Souvent le r√©sultat de comparaisons.\n\nPourquoi c‚Äôest important de conna√Ætre le type d‚Äôune variable ? Parce que tu ne peux pas additionner des pommes et des poires ! Enfin si, mais √ßa donne une compote que je n‚Äôaime pas‚Ä¶ üçé+üçê=ü§¢\nPlus s√©rieusement, chaque type a ses propres op√©rations possibles. Tu peux multiplier deux int, concat√©ner deux str, mais pas l‚Äôinverse.\nAllez, un petit d√©fi : devine le type des variables suivantes :\n\na = 42\nb = ‚Äú42‚Äù\nc = 42.0\nd = True\ne = 2 + 3j\n\nUne fois une variable d√©finie, pour obtenir son type tu peux utiliser la commande type().\n\n# Afficher le type d'une variable\nbonjour = \"Hello\"\ntype(bonjour) \n\n# D√©finition de plusieurs variables \nnom = \"Alice\"\nage = 25       \ntaille = 1.70  \nestVrai = True \nestFaux = False \nprint(\"la variable nom est de type :\", type(nom))\nprint(\"la variable age est de type :\",type(age))\nprint(\"la variable taille est de type :\",type(taille))\nprint(\"la variable estVrai est de type :\",type(estVrai))\nprint(\"la variable estFaux est de type :\",type(estFaux))\n\nla variable nom est de type : &lt;class 'str'&gt;\nla variable age est de type : &lt;class 'int'&gt;\nla variable taille est de type : &lt;class 'float'&gt;\nla variable estVrai est de type : &lt;class 'bool'&gt;\nla variable estFaux est de type : &lt;class 'bool'&gt;"
  },
  {
    "objectID": "cours/python_intro.html#conversion-de-types",
    "href": "cours/python_intro.html#conversion-de-types",
    "title": "Python : Introduction √† la programmation",
    "section": "4.2 Conversion de types",
    "text": "4.2 Conversion de types\nLe casting, c‚Äôest un peu comme dans un film : tu prends un acteur (une valeur) et tu lui fais jouer un autre r√¥le (un autre type). üé•\nEn Python, tu peux facilement convertir une variable entre les types de base par exemple :\nüé¨ int ‚û° str\nüé¨ str ‚û° int\nüé¨ float ‚û° int\nüé¨ int ‚û° bool\nMais attention aux pi√®ges !\nToutes les conversions ne sont pas possibles, comme transformer un texte en nombre :\nprix = \"dix\" prix_int = int(prix)  # Erreur : ValueError\n\nConversion en Entier (int)\n\n\n# Depuis une cha√Æne de caract√®res :\nchaine = \"123\"\nnombre = int(chaine)  # Convertit la cha√Æne \"123\" en entier 123\n\n## Depuis un bool√©en :\nvrai = True\nentier = int(vrai)  # Convertit True en 1\n\n## Depuis un float :\nflottant = 9.99\nentier = int(flottant)  # Convertit 9.99 en 9 (troncature, pas d'arrondi)\n\n\nConversion en Cha√Æne de Caract√®res (str)\n\n\n## Depuis un entier ou un float :\nnombre = 123\nchaine = str(nombre)  # Convertit l'entier 123 en cha√Æne \"123\"\n\n## Depuis un bool√©en :\nfaux = False\nchaine = str(faux)  # Convertit False en \"False\"\n\n\nConversion en Bool√©en (bool)\n\n\n## Depuis une cha√Æne de caract√®res** :\nchaine = \"\"\nbooleen = bool(chaine)  # Convertit une cha√Æne vide en False\nchaine2 = \"Python\"\nbooleen2 = bool(chaine2)  # Convertit \"Python\" en True\n\n## Depuis un nombre : \nnombre = 0\nbooleen = bool(nombre)  # Convertit 0 en False\nnombre2 = 123\nbooleen2 = bool(nombre2)  # Convertit 123 en True\n\n\nConversion en Float (float)\n\n\n## Depuis une cha√Æne de caract√®res:\nchaine = \"123.45\"\nflottant = float(chaine)  # Convertit la cha√Æne \"123.45\" en float 123.45\n\n## Depuis un entier :\nentier = 100\nflottant = float(entier)  # Convertit l'entier 100 en float 100.0\n\n## Depuis un bool√©en:\nvrai = True\nflottant = float(vrai)  # Convertit True en 1.0"
  },
  {
    "objectID": "cours/python_intro.html#op√©rations-arithm√©tiques",
    "href": "cours/python_intro.html#op√©rations-arithm√©tiques",
    "title": "Python : Introduction √† la programmation",
    "section": "4.3 Op√©rations arithm√©tiques",
    "text": "4.3 Op√©rations arithm√©tiques\nEn Python, tu peux faire des maths facilement avec ces 4 op√©rateurs :\n\nL‚Äôaddition (+) : pour ajouter des nombres Exemple : 3 + 2 = 5\nLa soustraction (-) : pour soustraire des nombres Exemple : 5 - 2 = 3\nLa multiplication (*) : pour multiplier des nombres Exemple : 3 * 2 = 6\nLa division (/) : pour diviser des nombres Exemple : 6 / 2 = 3\n\nFacile, non ? Mais attends, y‚Äôa encore plus fort ! Python g√®re aussi :\n\nLes puissances (**) : pour les exposants Exemple : 2 ** 3 = 8 (2 puissance 3)\nLes divisions enti√®res (//) : pour obtenir un r√©sultat entier Exemple : 7 // 2 = 3\nLes modulos (%) : pour obtenir le reste d‚Äôune division Exemple : 7 % 2 = 1 (car 7 divis√© par 2 donne 3 reste 1)\n\n\nsomme = 10 + 5       # R√©sultat: 15\ndifference = 10 - 5  # R√©sultat: 5\nproduit = 10 * 5     # R√©sultat: 50\nquotient = 10 / 5    # R√©sultat: 2.0\nreste = 10 % 3       # R√©sultat: 1\npuissance = 2 ** 3   # R√©sultat: 8\npuissance_bis = 2 ^ 3 # R√©sultat: 8\n\n\n\n\n\n\n\nOp√©rations sur les str\n\n\n\n\n\nGr√¢ce √† ces 2 op√©rateurs magiques :\n\nLa concat√©nation (+) : pour combiner des cha√Ænes Exemple : ‚ÄúHello‚Äù + ‚Äù World!‚Äù = ‚ÄúHello World!‚Äù\nLa r√©p√©tition (*) : pour r√©p√©ter une cha√Æne un certain nombre de fois Exemple : ‚ÄúHa‚Äù * 3 = ‚ÄúHaHaHa‚Äù\n\nC‚Äôest aussi simple que √ßa ! Mais attention, y‚Äôa quelques r√®gles √† respecter :\n‚ö†Ô∏è Tu ne peux pas concat√©ner des types diff√©rents (string + int par exemple). Faudra d‚Äôabord les convertir.\n‚ö†Ô∏è La r√©p√©tition ne marche qu‚Äôavec des entiers positifs. Pas de ‚ÄúHa‚Äù * -3 ou ‚ÄúLOL‚Äù * 2.5 !"
  },
  {
    "objectID": "cours/python_intro.html#op√©rateurs-daffectation-compos√©s",
    "href": "cours/python_intro.html#op√©rateurs-daffectation-compos√©s",
    "title": "Python : Introduction √† la programmation",
    "section": "4.4 Op√©rateurs d‚Äôaffectation compos√©s",
    "text": "4.4 Op√©rateurs d‚Äôaffectation compos√©s\nLes op√©rateurs d‚Äôaffectation compos√©s sont des raccourcis qui combinent une op√©ration arithm√©tique ou binaire avec une affectation.\nEn gros, ils permettent d‚Äôeffectuer une op√©ration sur une variable et de lui r√©affecter le r√©sultat en une seule √©tape.\n\n# Initialisation de x\nx = 5\nprint(x)\n\n5\n\n\n\n# Ajouter et assigner\nx += 2  # x est maintenant 7\nprint(x)\n\n7\n\n\n\n# Soustraire et assigner\nx -= 3  # x est maintenant 4\nprint(x)\n\n4\n\n\n\n# Multiplier et assigner\nx *= 4  # x est maintenant 16\nprint(x)\n\n16\n\n\n\n# Diviser et assigner\nx /= 2  # x est maintenant 8\nprint(x)\n\n8.0\n\n\n\n# Division enti√®re et assigner\nx //= 3  # x est maintenant 2\nprint(x)\n\n2.0\n\n\n\n# Modulo et assigner\nx %= 3  # x est maintenant 2\nprint(x)\n\n2.0\n\n\n\n# Exponentielle et assigner\nx **= 2  # x est maintenant 4\nprint(x)\n\n4.0"
  },
  {
    "objectID": "cours/python_intro.html#afficher-formater-et-int√©rargir-avec-un-utilisateur",
    "href": "cours/python_intro.html#afficher-formater-et-int√©rargir-avec-un-utilisateur",
    "title": "Python : Introduction √† la programmation",
    "section": "4.5 Afficher, formater et int√©rargir avec un utilisateur",
    "text": "4.5 Afficher, formater et int√©rargir avec un utilisateur\nCommen√ßons par la base : la fonction print(). Elle affiche simplement le texte que tu lui passe entre parenth√®ses. C‚Äôest comme un √©criteau lumineux ! ‚ú®\n\nprint(\"Hello, World!\")\n\nHello, World!\n\n\nMais que faire si tu veux inclure des valeurs de variables dans ton message ?\nC‚Äôest l√† que le formatage entre en jeu ! üé≠\nLa m√©thode traditionnelle utilise la fonction format() :\n\nnom = \"Alice\"\nage = 25\nprint(\"Je m'appelle {} et j'ai {} ans.\".format(nom, age))\n\nJe m'appelle Alice et j'ai 25 ans.\n\n\nC‚Äôest comme un mod√®le o√π {} sont des espaces r√©serv√©s pour tes variables. Tu les remplis ensuite avec format() dans l‚Äôordre.\nMais depuis Python 3.6, il y a une m√©thode encore plus cool : les f-strings !\n\nnom = \"Bob\"\nage = 30\nprint(f\"Je m'appelle {nom} et j'ai {age} ans.\")\n\nJe m'appelle Bob et j'ai 30 ans.\n\n\nAvec les f-strings, tu mets un f avant les guillemets et tu peux directement ins√©rer tes variables entre {}. C‚Äôest plus concis et plus lisible !\nTu peux m√™me faire des calculs dans les accolades :\n\nx = 5\ny = 3\nprint(f\"{x} + {y} = {x+y}\") \n\n5 + 3 = 8\n\n\nQue dis-tu de formater tes nombres pour qu‚Äôils aient toujours un certain nombre de d√©cimales ? C‚Äôest super pratique pour afficher des prix ou des pourcentages !\n\nprix = 9.999999\nprint(f\"Le prix est de {prix:.2f} ‚Ç¨\") \n\nLe prix est de 10.00 ‚Ç¨\n\n\n\npi = 3.14159\nprint(\"Pi est environ {:.2f}\".format(pi))  \n\nPi est environ 3.14\n\n\nAvec :.2f, tu dis √† Python d‚Äôafficher ton nombre avec 2 d√©cimales et un format flottant.\nEt si tu veux aligner ton texte ? Pas de probl√®me, Python a ce qu‚Äôil te faut !\n\nproduit = \"pommes\"\nquantite = 3\nprint(f\"{'Produit':&lt;10} {'Quantit√©':&gt;10}\")\nprint(f\"{produit:&lt;10} {quantite:&gt;10}\")\n\nProduit      Quantit√©\npommes              3\n\n\n\nprint(\"{:&lt;10} | {:^10} | {:&gt;10}\".format(\"Gauche\", \"Centre\", \"Droite\"))\n\nGauche     |   Centre   |     Droite\n\n\nAvec :&lt;10, :^10, et :&gt;10, tu alignes le texte √† gauche, au centre, ou √† droite sur 10 caract√®res. C‚Äôest parfait pour cr√©er des tableaux bien align√©s !\nTu peux m√™me combiner ces options pour un contr√¥le total du formatage :\n\nprint(\"{:10.2f} | {:^10.3f} | {:&gt;10.1f}\".format(3.14159, 2.71828, 1.41421))\n\n      3.14 |   2.718    |        1.4\n\n\nLa fonction input() est comme un formulaire ! Elle permet de demander √† l‚Äôutilisateur de saisir des donn√©es au clavier.\nnom = input(\"Quel est votre nom ? \")\nprint(f\"Bonjour, {nom} !\")\nIci, le programme demande √† l‚Äôutilisateur de saisir son nom, puis le salue personnellement. C‚Äôest comme un dialogue interactif !\nQuelques points importants √† noter :\n\nLa fonction input() renvoie toujours une cha√Æne de caract√®res (str). Si tu veux un nombre, tu dois convertir la r√©ponse avec int() ou float().\nTu peux stocker la r√©ponse de l‚Äôutilisateur dans une variable pour l‚Äôutiliser plus tard dans ton programme.\nN‚Äôoublie pas d‚Äôafficher un message clair pour guider l‚Äôutilisateur sur ce qu‚Äôil doit saisir.\n\nVoici un autre exemple pour calculer l‚Äô√¢ge d‚Äôune personne :\nnom = input(\"Comment vous appelez-vous ? \")\nage = int(input(\"Quel √¢ge avez-vous ? \"))\n\nprint(f\"{nom}, dans 10 ans vous aurez {age + 10} ans !\")\nIci, on demande le nom et l‚Äô√¢ge de l‚Äôutilisateur. On convertit l‚Äô√¢ge en nombre entier avec int() pour pouvoir faire un calcul. Puis on affiche un message personnalis√©. C‚Äôest magique ! ‚ú®\n\n\n\n\n\n\n√Ä Retenir\n\n\n\n\n\nüî¢ Les variables sont des espaces de stockage nomm√©s pour contenir des donn√©es qui peuvent changer pendant l‚Äôex√©cution du programme.\nüé® Les types de donn√©es incluent les entiers, les flottants, les cha√Ænes de caract√®res, les bool√©ens, etc.\n‚ûï Les op√©rateurs pour les nombres incluent + (addition), - (soustraction), * (multiplication), / (division), % (modulo).\nüîó Pour les cha√Ænes, + sert √† la concat√©nation et * √† la r√©p√©tition.\nüîÑ Les op√©rateurs compos√©s (+=, -=, *=, /=, %=) combinent op√©ration et affectation.\nüñ®Ô∏è La fonction print() affiche du texte et des valeurs de variables.\nüé≠ La m√©thode format() permet d‚Äôins√©rer des valeurs dans un mod√®le de cha√Æne.\nüìù La fonction input() permet de demander une saisie √† l‚Äôutilisateur."
  },
  {
    "objectID": "cours/python_intro.html#challenge-time",
    "href": "cours/python_intro.html#challenge-time",
    "title": "Python : Introduction √† la programmation",
    "section": "4.6 Challenge Time! üöÄ",
    "text": "4.6 Challenge Time! üöÄ\nOuvre un notebook intitul√© : 1_variables.ipynb et mets tes connaissances √† l‚Äô√©preuve avec ces exercices rapides :\n\n4.6.1 Affectation et affichage\n\nCr√©e une variable nom et assigne-lui ton pr√©nom.\nCr√©e une variable age et assigne-lui ton √¢ge.\nAffiche les valeurs des variables nom et age en utilisant la fonction print().\n\n\n\nVoir la correction\n# Cr√©e les variables\nnom = \"M√©nyssa\"  # Remplace \"Alice\" par ton pr√©nom\nage = 25       # Remplace 25 par ton √¢ge\n\n# Affiche les variables\nprint(\"Nom:\", nom)\nprint(\"√Çge:\", age)\n\n\n\n\n4.6.2 Manipulation simple\n\nCr√©e une variable x et assigne-lui la valeur 10.\nCr√©e une variable y et assigne-lui la valeur 5.\nCr√©e une variable somme et calcule la somme de x et y.\nAffiche la valeur de somme.\n\n\n\nVoir la correction\n# Cr√©e les variables\nx = 10\ny = 5\n\n# Calcule la somme\nsomme = x + y\n\n# Affiche la somme\nprint(\"La somme de\", x, \"et\", y, \"est\", somme)\n\n\n\n\n4.6.3 Concat√©nation cha√Ænes de caract√®res\n\nCr√©e une variable prenom et assigne-lui ton pr√©nom.\nCr√©e une variable nom_famille et assigne-lui ton nom de famille.\nCr√©e une variable nom_complet et concat√®ne prenom et nom_famille avec un espace entre eux.\nAffiche nom_complet.\n\n\n\nVoir la correction\n# Cr√©e les variables\nprenom = \"M√©nyssa\"         \nnom_famille = \"Cherifa-Luron\"   \n\n# Concat√®ne les cha√Ænes de caract√®res\nnom_complet = prenom + \" \" + nom_famille\n\n# Affiche le nom complet\nprint(\"Nom complet:\", nom_complet)\n\n\n\n\n4.6.4 Affectation multiple\n\nCr√©e trois variables a, b, c et assigne-leur respectivement les valeurs 1, 2 et 3 en une seule ligne.\nAffiche les valeurs de a, b et c en une seule ligne en utilisant print().\n\n\n\nVoir la correction\n# Affectation multiple\na, b, c = 1, 2, 3\n\n# Affiche les variables\nprint(\"a =\", a, \", b =\", b, \", c =\", c)\n\n\n\n\n4.6.5 Changement de valeurs\n\nCr√©e une variable temp et assigne-lui la valeur 10.\nR√©assigne √† temp la valeur 20.\nAffiche la nouvelle valeur de temp.\n\n\n\nVoir la correction\n# Cr√©e la variable et assigne une valeur\ntemp = 10\nprint(\"Valeur initiale de temp:\", temp)\n\n# R√©assigne une nouvelle valeur\ntemp = 20\nprint(\"Nouvelle valeur de temp:\", temp)\n\n\n\n\n4.6.6 Conversion de types\n\nCr√©e une variable prix et assigne-lui la valeur ‚Äú100‚Äù (cha√Æne de caract√®res).\nConvertis prix en entier et assigne-le √† une nouvelle variable prix_entier.\nAjoute 50 √† prix_entier et affiche le r√©sultat.\n\n\n\nVoir la correction\n# Cr√©e la variable et assigne une valeur de type cha√Æne\nprix = \"100\"\n\n# Convertis la cha√Æne en entier\nprix_entier = int(prix)\n\n# Ajoute 50 √† la variable enti√®re\nprix_entier += 50\n\n# Affiche le r√©sultat\nprint(\"Le prix total est de\", prix_entier)\n\n\n\n\n4.6.7 Carte de visite personnalis√©e ?\n\nDemande √† l‚Äôutilisateur son nom, son poste, son email et son num√©ro de t√©l√©phone avec input().\nUtilise format() pour ins√©rer ces informations dans un mod√®le de carte de visite pr√©-d√©fini.\nAligne et le contr√¥le de la largeur des champs avec format()\nAffiche la carte de visite r√©sultante avec print()\n\n\n\nVoir la correction\nprint(\"Bienvenue dans le G√©n√©rateur de Cartes de Visite ! üé®\")\n\n# nom = input(\"Quel est votre nom ? \")\n# poste = input(\"Quel est votre poste ? \")\n# email = input(\"Quelle est votre adresse email ? \")\n# telephone = input(\"Quel est votre num√©ro de t√©l√©phone ? \")\n\nprint(\"Voici votre carte de visite :\")\nprint(\"================================\")\nprint(\"| {:&lt;30} |\".format(nom))\nprint(\"| {:&lt;30} |\".format(poste))\nprint(\"| {:&lt;30} |\".format(email))\nprint(\"| {:&lt;30} |\".format(telephone))\nprint(\"================================\")"
  },
  {
    "objectID": "cours/python_intro.html#les-op√©rateurs-comparaison-logique-et-appartenance",
    "href": "cours/python_intro.html#les-op√©rateurs-comparaison-logique-et-appartenance",
    "title": "Python : Introduction √† la programmation",
    "section": "5.1 Les Op√©rateurs : Comparaison, Logique et Appartenance",
    "text": "5.1 Les Op√©rateurs : Comparaison, Logique et Appartenance\nLes op√©rateurs permettent de d√©finir des expressions logiques. qui servent de conditions pour diriger le flux d‚Äôex√©cution du programme. Voil√† c‚Äôest tout.\n\n5.1.1 Op√©rateurs de comparaison\nLes op√©rateurs de comparaison sont essentiels en Python. Ils comparent deux valeurs et renvoient soit True soit False, selon le r√©sultat de la comparaison.\nC‚Äôest comme avoir un juge impartial qui te dit si deux valeurs sont √©gales, diff√©rentes, ou laquelle est plus grande que l‚Äôautre.\n\n\n\nOp√©rateur comparaison\nDescription\nExemple\nR√©sultat\n\n\n\n\n==\n√âgalit√©\n5 == 5\nTrue\n\n\n!=\nDiff√©rent de\n5 != 3\nTrue\n\n\n&gt;\nSup√©rieur √†\n5 &gt; 3\nTrue\n\n\n&lt;\nInf√©rieur √†\n3 &lt; 5\nTrue\n\n\n&gt;=\nSup√©rieur ou √©gal √†\n5 &gt;= 5\nTrue\n\n\n&lt;=\nInf√©rieur ou √©gal √†\n3 &lt;= 5\nTrue\n\n\n\n\na = 10\nb = 20\n\nprint(a == b)  \nprint(a != b)  \nprint(a &gt; b)   \nprint(a &lt; b)  \nprint(a &gt;= b)  \nprint(a &lt;= b)  \n\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\n\n\n\n\n5.1.2 Op√©rateurs logiques\nLes op√©rateurs logiques sont les gardiens de la v√©rit√© en Python. Ils te permettent de combiner des expressions logiques pour obtenir un r√©sultat final bas√© sur les conditions sp√©cifi√©es. C‚Äôest comme cr√©er des alliances strat√©giques pour d√©couvrir la v√©rit√© ultime.\n\n\n\nOp√©rateur logique\nDescription\nExemple\nR√©sultat\n\n\n\n\nand\nEt\nTrue and False\nFalse\n\n\nor\nOu\nTrue or False\nTrue\n\n\nnot\nNon\nnot True\nFalse\n\n\n\n\nx = True\ny = False\n\nprint(x and y)  \nprint(x or y)  \nprint(not x)    \n\nFalse\nTrue\nFalse\n\n\n\n\n\n\n\n\nCha√Æner les comparateurs\n\n\n\n\n\nIl est √©galement possible de cha√Æner les comparateurs :\n\na, b, c = 1, 10, 100\nprint(a &lt; b &lt; c)\nprint(a &gt; b &lt; c)\n\nTrue\nFalse\n\n\n\n\n\n\n\n5.1.3 Op√©rateurs d‚Äôappartenance\nLes op√©rateurs d‚Äôappartenance v√©rifient si une valeur ou une cha√Æne de caract√®res se trouve √† l‚Äôint√©rieur d‚Äôune autre valeur, cha√Æne de caract√®res ou s√©quence.\n\n\n\nOp√©rateur d‚Äôappartenance\nDescription\nExemple\nR√©sultat\n\n\n\n\nin\nDans\n'a' in 'banana'\nTrue\n\n\nnot in\nPas dans\n'x' not in 'banana'\nTrue\n\n\n\n\ntexte = \"Hello, World!\"\n\nprint('H' in texte)        \nprint('hello' in texte)    \nprint('Hello' not in texte) \nprint('x' not in texte)     \n\nTrue\nFalse\nFalse\nTrue\n\n\n\n\n\n\n\n\n√Ä Retenir\n\n\n\n\n\nLes op√©rateurs permettent de d√©finir des expressions logiques.\n\nLes op√©rateurs de comparaison sont comme des juges impartiaux qui comparent deux valeurs et te disent si elles sont √©gales, diff√©rentes ou laquelle est la plus grande. C‚Äôest un peu comme comparer deux pizzas pour savoir laquelle a le plus de pepperoni ! üçï\n\nVoici quelques exemples :\n\n== : √©galit√© (comme deux parts de pizza identiques) üçïüçï\n!= : diff√©rent de (comme une pizza pepperoni et une v√©g√©tarienne) üçïü•ó\n&gt; et &lt; : sup√©rieur et inf√©rieur √† (comme une grande et une petite pizza) üçïüçï\n\n\nLes op√©rateurs logiques, eux, sont les gardiens de la v√©rit√© en Python ! Ils te permettent de combiner des expressions logiques pour obtenir un r√©sultat final. C‚Äôest comme cr√©er des alliances strat√©giques pour d√©couvrir la v√©rit√© ultime !\n\n\nand : les deux conditions doivent √™tre vraies (comme aimer la pizza ET la data science) üçïüíª\nor : au moins une des conditions doit √™tre vraie (comme aimer la pizza OU les p√¢tes) üçïüçù\nnot : inverse la condition (comme ne PAS aimer les ananas sur la pizza) üççüö´\n\n\nEnfin, les op√©rateurs d‚Äôappartenance v√©rifient si une valeur se trouve dans une autre, comme chercher une tranche de pepperoni dans une pizza ! üçï\n\n\nin : la valeur est pr√©sente (comme ‚Äúpepperoni‚Äù dans ‚Äúpizza pepperoni‚Äù) üçïüëç\nnot in : la valeur est absente (comme ‚Äúananas‚Äù dans ‚Äúpizza pepperoni‚Äù) üççüëé"
  },
  {
    "objectID": "cours/python_intro.html#challenge-time-1",
    "href": "cours/python_intro.html#challenge-time-1",
    "title": "Python : Introduction √† la programmation",
    "section": "5.2 Challenge Time! üöÄ",
    "text": "5.2 Challenge Time! üöÄ\nOuvre un notebook intitul√© : 2_structures_controles.ipynb et mets tes connaissances √† l‚Äô√©preuve avec ces exercices rapides :\n\n5.2.1 Comparaison\n\nCr√©e deux variables a et b avec des valeurs diff√©rentes. Utilise tous les op√©rateurs de comparaison pour imprimer les r√©sultats des comparaisons entre a et b.\n\n\n\nVoir la correction\n# D√©claration des variables\na = 15\nb = 10\n\n# Op√©rations de comparaison\nprint(\"a == b:\", a == b)  \nprint(\"a != b:\", a != b)  \nprint(\"a &gt; b:\", a &gt; b)    \nprint(\"a &lt; b:\", a &lt; b)    \nprint(\"a &gt;= b:\", a &gt;= b)  \nprint(\"a &lt;= b:\", a &lt;= b)  \n\n\n\n\n5.2.2 Logique\n\nUtilise tous les op√©rateurs logiques pour combiner des expressions de comparaison. Par exemple, v√©rifie si a est sup√©rieur √† b et si a est pair.\n\n\n\nVoir la correction\n# D√©claration des variables\na = 15\nb = 10\n\n# Expression logique\nresultat = (a &gt; b) and (a % 2 == 0)\n\n# Affichage du r√©sultat\nprint(\"a est sup√©rieur √† b et a est pair:\", resultat) \n\n\n\n\n5.2.3 Appartenance\n\nCr√©e une cha√Æne de caract√®res et utilise tous les op√©rateurs d‚Äôappartenance pour v√©rifier si une sous-cha√Æne sp√©cifique est pr√©sente dans la cha√Æne principale.\n\n\n\nVoir la correction\n# D√©claration de la cha√Æne de caract√®res\ntexte = \"Hello, World!\"\n\n# V√©rification de la pr√©sence de sous-cha√Ænes\nprint(\"'Hello' in texte:\", 'Hello' in texte)      \nprint(\"'hello' in texte:\", 'hello' in texte)      \nprint(\"'World' not in texte:\", 'World' not in texte) \nprint(\"'Python' not in texte:\", 'Python' not in texte)"
  },
  {
    "objectID": "cours/python_intro.html#les-conditions",
    "href": "cours/python_intro.html#les-conditions",
    "title": "Python : Introduction √† la programmation",
    "section": "5.3 Les conditions",
    "text": "5.3 Les conditions\nImagine que tu es en train de coder le GPS de Waze, ton boulot est de cr√©er un programme qui indique √† l‚Äôutilisateur la bonne route √† prendre en fonction des conditions de circulation.\nC‚Äôest exactement ce que font les instructions if, elif et else ! üö¶\nüü¢ L‚Äôinstruction if teste une condition. Si elle est vraie, le code sous le if est ex√©cut√©. C‚Äôest comme si ton GPS disait : ‚ÄúSi la route est d√©gag√©e, prends la voie rapide !‚Äù üèéÔ∏è\nüü° L‚Äôinstruction elif (abr√©viation de ‚Äúelse if‚Äù) permet de tester une autre condition si la pr√©c√©dente √©tait fausse. C‚Äôest comme si ton GPS disait : ‚ÄúSinon, si la voie rapide est bouch√©e, prends la nationale.‚Äù üöó\nüî¥ Enfin, l‚Äôinstruction else capture tous les cas qui ne correspondent pas aux conditions pr√©c√©dentes. C‚Äôest le dernier recours de ton GPS : ‚ÄúSi tout le reste √©choue, sors les chaussures de randonn√©e !‚Äù ü•æ\nVoici un exemple concret pour t‚Äôaider √† choisir le bon tarif en fonction de l‚Äô√¢ge :\n\nage = 25\nif age &gt;= 65:\n    print(\"Tu b√©n√©ficies de la tarification senior. üßì\")\nelif age &lt; 18:\n    print(\"Tu b√©n√©ficies de la tarification jeune. üë¶\")\nelse:\n    print(\"Tu b√©n√©ficies de la tarification standard. üí∞\")\n\nTu b√©n√©ficies de la tarification standard. üí∞\n\n\nTu peux √©galement combiner plusieurs conditions en utilisant les op√©rateurs logiques and, or et not. Par exemple pour offrir une promotion sp√©ciale aux clients qui ont entre 18 et 25 ans ET qui sont √©tudiants.\nVoici comment ton code pourrait g√©rer √ßa :\n\nage = 20\nest_etudiant = True\n\nif age &gt;= 18 and age &lt;= 25 and est_etudiant:\n    print(\"F√©licitations, vous b√©n√©ficiez de la promotion sp√©ciale √©tudiante ! üéì\")\nelse:\n    print(\"D√©sol√©, vous ne remplissez pas les conditions pour cette promotion. üòû\")\n\nF√©licitations, vous b√©n√©ficiez de la promotion sp√©ciale √©tudiante ! üéì\n\n\nIci, les conditions sont combin√©es avec and, ce qui signifie que toutes doivent √™tre vraies pour que le code sous le if soit ex√©cut√©.\nTu peux aussi utiliser or pour ex√©cuter le code si au moins une des conditions est vraie, et not pour inverser une condition.\nAvec les conditions imbriqu√©es, tu peux cr√©er des instructions ‚Äúsi‚Ä¶ alors‚Ä¶ sinon‚Ä¶‚Äù √† l‚Äôinfini ! üåÄ\nPrenons un exemple concret. Disons que tu veux cat√©goriser les clients en fonction de leur √¢ge et de leur statut √©tudiant :\n\nage = 20\nest_etudiant = True\n\nif age &lt; 18:\n    print(\"Vous b√©n√©ficiez du tarif junior. üë¶\")\nelse:\n    if est_etudiant:\n        print(\"Vous b√©n√©ficiez du tarif √©tudiant. üéì\")\n    else:\n        print(\"Vous b√©n√©ficiez du tarif standard. üí∞\")\n\nVous b√©n√©ficiez du tarif √©tudiant. üéì\n\n\nIci, on a une premi√®re condition qui v√©rifie si le client a moins de 18 ans. Si ce n‚Äôest pas le cas, on passe √† une deuxi√®me condition imbriqu√©e dans le else pour v√©rifier si le client est √©tudiant.\nTu peux imbriquer autant de conditions que n√©cessaire pour g√©rer tous les cas de figure. Mais attention √† ne pas te perdre dans les m√©andres des conditions imbriqu√©es. Ton code doit rester lisible et compr√©hensible.\nN‚Äôh√©site pas √† ajouter des commentaires pour expliquer ton raisonnement.\nToutefois il existe une fa√ßon plus concise de le faire : l‚Äôexpression conditionnelle (ternary operators‚Äù).\nVoici comment √ßa marche :\n\nage = 20\nstatut = \"majeur\" if age &gt;= 18 else \"mineur\"\nprint(statut) \n\nmajeur\n\n\nEn gros, ‚ÄúSi la condition est vraie, prends la premi√®re sortie. Sinon, prends la deuxi√®me.‚Äù\nL‚Äôexpression conditionnelle est structur√©e ainsi : valeur_si_vrai if condition else valeur_si_faux.\nVoici un autre exemple pour t‚Äôinspirer :\n\nnote = 85\nresultat = \"Bravo, vous avez r√©ussi ! üéâ\" if note &gt;= 60 else \"Dommage, vous avez √©chou√©. üòû\"\nprint(resultat) \n\nBravo, vous avez r√©ussi ! üéâ\n\n\nTu pourrais utiliser des expressions conditionnelles en cascade, comme ceci :\n\nage = 25\netudiant = True\n\nstatut = \"junior\" if age &lt; 18 else (\"etudiant\" if etudiant else \"adulte\")\nprint(statut) \n\netudiant\n\n\nIci, on a une expression conditionnelle (‚Äújunior‚Äù if age &lt; 18) imbriqu√©e dans une autre (‚Äúetudiant‚Äù if etudiant else ‚Äúadulte‚Äù). C‚Äôest comme des poup√©es russes ! ü™Ü\nBien s√ªr, il faut utiliser cette technique avec parcimonie √ßa peut vite faire mal √† la t√™te.\n\n\n\n\n\n\n√Ä Retenir\n\n\n\n\n\nR√©capitulons tout ce que tu as appris :\nüö¶ Les instructions if, elif et else pour prendre des d√©cisions en fonction de conditions.\nüß© Les op√©rateurs logiques and, or et not pour combiner des conditions.\nüåÄ Les conditions imbriqu√©es pour cr√©er des structures de d√©cision complexes.\nü•™ Les expressions conditionnelles (op√©rateur ternaire) pour assigner des valeurs de mani√®re concise.\nüîó Les conditions cha√Æn√©es pour encha√Æner des comparaisons de mani√®re lisible."
  },
  {
    "objectID": "cours/python_intro.html#challenge-time-2",
    "href": "cours/python_intro.html#challenge-time-2",
    "title": "Python : Introduction √† la programmation",
    "section": "5.4 Challenge Time! üöÄ",
    "text": "5.4 Challenge Time! üöÄ\nToujours dans le notebook : 2_structures_controles.ipynb essaye de r√©soudre ces exercices rapides.\n\n5.4.1 Calculateur de pourboire !\nTu es restaurateur et tu veux rapidement calculer le pourboire en fonction de la qualit√© du service. 1. Demande √† l‚Äôutilisateur le montant de la facture et une note pour le service (entre 1 et 5). 2. Calcule et affiche le pourboire sugg√©r√©\n\n\nVoir la correction\nprint(\"Bienvenue dans le Calculateur de Pourboire ! üßÆ\")\n\nfacture = float(input(\"Quel est le montant de la facture ? \"))\nnote = int(input(\"Comment noteriez-vous le service (entre 1 et 5) ? \"))\n\nif note == 5:\n    pourboire = facture * 0.20\nelif note == 4:\n    pourboire = facture * 0.15\nelif note == 3:\n    pourboire = facture * 0.10\nelse:\n    pourboire = facture * 0.05\n\nprint(f\"Pour une facture de {facture:.2f} ‚Ç¨ et un service not√© {note}/5, nous sugg√©rons un pourboire de {pourboire:.2f} ‚Ç¨.\")\n\n\n\n\n5.4.2 Parit√©\n√âcris un programme qui d√©termine si un nombre est pair ou impair.\n\nDemande √† l‚Äôutilisateur de saisir un nombre entier.\nUtilise une instruction if/else pour v√©rifier si le nombre est pair ou impair.\nAffiche le r√©sultat.\n\n\n\n\n\n\n\nAstuce\n\n\n\n\n\nRappels sur la parit√© :\n\nUn nombre est pair s‚Äôil est divisible par 2 (le reste de la division par 2 est 0).\nUn nombre est impair s‚Äôil n‚Äôest pas divisible par 2 (le reste de la division par 2 est 1).\nL‚Äôop√©rateur modulo % donne le reste d‚Äôune division.\n\n\n\n\n\n\nVoir la solution\nnombre = int(input(\"Entrez un nombre entier : \"))\n\nif nombre % 2 == 0:\n    print(f\"{nombre} est un nombre pair.\")\nelse:\n    print(f\"{nombre} est un nombre impair.\")\n\n\n\n\n5.4.3 Calculatrice simple\n√âcris un programme qui effectue une op√©ration arithm√©tique de base entre deux nombres.\n\nDemande √† l‚Äôutilisateur de saisir deux nombres et un op√©rateur (+, -, *, /).\nUtilise une instruction if/elif/else pour effectuer l‚Äôop√©ration correspondante.\nAffiche le r√©sultat.\n\n\n\n\n\n\n\nAstuce\n\n\n\n\n\nPoints cl√©s :\n\nUtilise float() pour permettre des nombres d√©cimaux.\nV√©rifie la division par z√©ro pour √©viter les erreurs.\nG√®re les op√©rateurs non valides avec un message d‚Äôerreur.\n\n\n\n\n\n\nVoir la solution\nnum1 = float(input(\"Entrez le premier nombre : \"))\nnum2 = float(input(\"Entrez le deuxi√®me nombre : \"))\noperateur = input(\"Entrez l'op√©rateur (+, -, *, /) : \")\n\nif operateur == \"+\":\n    resultat = num1 + num2\nelif operateur == \"-\":\n    resultat = num1 - num2\nelif operateur == \"*\":\n    resultat = num1 * num2\nelif operateur == \"/\":\n    if num2 != 0:\n        resultat = num1 / num2\n    else:\n        print(\"Erreur : division par z√©ro !\")\n        resultat = None\nelse:\n    print(\"Op√©rateur non valide.\")\n    resultat = None\n\nif resultat is not None:\n    print(f\"{num1} {operateur} {num2} = {resultat}\")\n\n\n\n\n5.4.4 Ann√©e bissextile\n√âcris un programme qui d√©termine si une ann√©e est bissextile ou non.\n\nDemande √† l‚Äôutilisateur de saisir une ann√©e.\nUtilise des conditions imbriqu√©es pour v√©rifier si l‚Äôann√©e est bissextile.\nAffiche le r√©sultat.\n\n\n\n\n\n\n\nAstuce\n\n\n\n\n\nR√®gles des ann√©es bissextiles :\n\nUne ann√©e est bissextile si elle est divisible par 4.\nMais si elle est divisible par 100, elle doit aussi √™tre divisible par 400 pour √™tre bissextile.\nSinon, elle n‚Äôest pas bissextile.\n\n\n\n\n\n\nVoir la solution\nannee = int(input(\"Entrez une ann√©e : \"))\n\nif annee % 4 == 0:\n    if annee % 100 == 0:\n        if annee % 400 == 0:\n            print(f\"{annee} est une ann√©e bissextile.\")\n        else:\n            print(f\"{annee} n'est pas une ann√©e bissextile.\")\n    else:\n        print(f\"{annee} est une ann√©e bissextile.\")\nelse:\n    print(f\"{annee} n'est pas une ann√©e bissextile.\")\n\n\n\n\n5.4.5 Tri de nombres\n√âcris un programme qui trouve le plus grand et le plus petit parmi trois nombres.\n\nDemande √† l‚Äôutilisateur de saisir trois nombres.\nUtilise des expressions conditionnelles pour trouver le maximum et le minimum.\nAffiche les r√©sultats.\n\n\n\n\n\n\n\nAstuce\n\n\n\n\n\nAstuces :\n\nUtilise des expressions conditionnelles pour une syntaxe concise.\nCompare chaque nombre aux deux autres pour trouver le max/min.\nPas besoin de trier compl√®tement, juste de trouver les extr√™mes.\n\n\n\n\n\n\nVoir la solution\na = float(input(\"Entrez le premier nombre : \"))\nb = float(input(\"Entrez le deuxi√®me nombre : \"))\nc = float(input(\"Entrez le troisi√®me nombre : \"))\n\nmax_num = a if a &gt;= b and a &gt;= c else b if b &gt;= c else c\nmin_num = a if a &lt;= b and a &lt;= c else b if b &lt;= c else c\n\nprint(f\"Le plus grand nombre est : {max_num}\")\nprint(f\"Le plus petit nombre est : {min_num}\")\n\n\n\n\n5.4.6 Cat√©gorie d‚Äô√¢ge\n√âcris un programme qui d√©termine la cat√©gorie d‚Äô√¢ge d‚Äôune personne.\n\nDemande √† l‚Äôutilisateur de saisir son √¢ge.\nUtilise des conditions cha√Æn√©es pour d√©terminer sa cat√©gorie d‚Äô√¢ge.\nAffiche le r√©sultat.\n\n\n\n\n\n\n\nAstuce\n\n\n\n\n\nCat√©gories d‚Äô√¢ge typiques :\n\nEnfant : de 0 √† 12 ans\nAdolescent : de 13 √† 17 ans\nAdulte : de 18 √† 64 ans\nSenior : 65 ans et plus\n\n\n\n\n\n\nVoir la solution\nage = int(input(\"Quel est votre √¢ge ? \"))\n\nif age &lt; 0:\n    print(\"√Çge invalide.\")\nelif age &lt;= 12:\n    print(\"Vous √™tes un enfant.\")\nelif age &lt;= 17:\n    print(\"Vous √™tes un adolescent.\")\nelif age &lt;= 64:\n    print(\"Vous √™tes un adulte.\")\nelse:\n    print(\"Vous √™tes un senior.\")\n\n\n\n\n  \n    Coder facile avec DAMA\n  \n    Des coding sessions sur mesure, parce que tu es unique et que\n  \n  \n    \n      \n  \n  \n  \n    Tu r√™ves de progresser rapidement en code mais tu bloques sur certains concepts ?\n    Tu as besoin d'un coup de pouce personnalis√© par un pro pour franchir un cap ? Pourtant \n    \n    C'est le moment de r√©server ta coding session individuelle avec un expert DAMA. Un vrai booster de comp√©tences, sur-mesure, d√®s que tu en as besoin.\n    \n    Comment √ßa marche ?\n    1. Tu remplis le formulaire de contact en 2 min pour exprimer ton besoin\n    2. On fixe ensemble un cr√©neau pour un call vid√©o de 60 min \n    3. Lors du call, moi ou un.e expert t'aide √† r√©soudre ton probl√®me de code en direct\n    \n    Les avantages ?\n       Un accompagnement 100% personnalis√© et interactif\n       Des conseils concrets et des astuces de pro\n       Un gros boost de motivation et de confiance\n      \n      Alors n'attends plus et clique sur le bouton ci-dessous pour r√©server ta session d√®s maintenant.\n  \n  \n    \n      R√©server ma session ! üöÄ"
  },
  {
    "objectID": "cours/python_intro.html#les-boucles",
    "href": "cours/python_intro.html#les-boucles",
    "title": "Python : Introduction √† la programmation",
    "section": "5.5 Les boucles",
    "text": "5.5 Les boucles\nLes boucles sont des outils indispensables pour r√©p√©ter des actions sans se fatiguer. üí™\nC‚Äôest un moyen de dire √† Python : ‚ÄúH√©, r√©p√®te-moi √ßa un certain nombre de fois, tu veux bien ?‚Äù. Et Python, en bon petit soldat, va ex√©cuter le code dans la boucle autant de fois que tu le lui demandes.\nIl existe deux types de boucles principales :\n\nLa boucle for : c‚Äôest la boucle de pr√©dilection pour parcourir des s√©quences (listes, tuples, cha√Ænes de caract√®res, etc.). Elle te permet de traiter chaque √©l√©ment un par un, comme un chef √©toil√© qui pr√©pare minutieusement chaque plat. üë®‚Äçüç≥\n\nVoici √† quoi ressemble une boucle for :\nfor element in sequence:\n    # Fais quelque chose avec 'element'\n    print(element)\nIci, element est une variable temporaire qui va prendre la valeur de chaque √©l√©ment de la s√©quence √† chaque tour de boucle.\n\nLa boucle while : c‚Äôest la boucle qui te permet de r√©p√©ter un bloc de code tant qu‚Äôune condition est vraie. C‚Äôest un peu comme un enfant qui demande ‚ÄúOn est bient√¥t arriv√©s ?‚Äù √† r√©p√©tition pendant un long trajet. üöó\n\nVoici √† quoi ressemble une boucle while :\nwhile condition:\n    # Fais quelque chose tant que 'condition' est vraie\n    print(\"On y est presque !\")\nTant que la condition est vraie, Python va ex√©cuter le code dans la boucle. D√®s que la condition devient fausse, il sort de la boucle et passe √† la suite, comme un enfant qui s‚Äôendort enfin dans la voiture. üò¥\nMaintenant, quelques petits trucs sympas √† savoir sur les boucles :\n\nTu peux imbriquer des boucles les unes dans les autres, comme des poup√©es russes. C‚Äôest super pratique pour parcourir des structures de donn√©es complexes, comme des listes de listes. ü™Ü\nAvec les boucles for, tu peux parcourir les cl√©s et les valeurs d‚Äôun dictionnaire en m√™me temps gr√¢ce √† la m√©thode items(). C‚Äôest comme ouvrir deux cadeaux en un ! üéÅ\nSi tu veux sortir d‚Äôune boucle avant la fin, tu peux utiliser l‚Äôinstruction break. C‚Äôest comme un √©jection de si√®ge dans un avion, en cas d‚Äôurgence. ü™Ç\nSi tu veux passer √† l‚Äôit√©ration suivante sans finir l‚Äôit√©ration en cours, tu peux utiliser l‚Äôinstruction continue. C‚Äôest comme sauter une page dans un livre qui ne t‚Äôint√©resse pas. üìñ\n\nVoil√†, tu sais tout (ou presque) sur les boucles en Python ! C‚Äôest un outil super puissant qui te permettra d‚Äôautomatiser plein de t√¢ches r√©p√©titives et de traiter de grandes quantit√©s de donn√©es en un clin d‚Äô≈ìil.\nTu verras des exemples plus complets une fois que je t‚Äôaurais introduit les structures de donn√©es !\nLa premi√®re partie de ce cours est termin√© ! Je te propose maintenant un projet pour r√©capituler l‚Äôensemble des concepts que tu as appris."
  },
  {
    "objectID": "cours/python_intro.html#projet-1-g√©n√©rateur-de-blagues-nulles",
    "href": "cours/python_intro.html#projet-1-g√©n√©rateur-de-blagues-nulles",
    "title": "Python : Introduction √† la programmation",
    "section": "5.6 Projet 1 : G√©n√©rateur de blagues nulles üéØ",
    "text": "5.6 Projet 1 : G√©n√©rateur de blagues nulles üéØ\n\n5.6.1 Objectif :\nCr√©er un programme Python qui g√©n√®re des blagues nulles en fonction du choix de l‚Äôutilisateur. Ce projet te permettra de manipuler les variables pour stocker du texte et d‚Äôutiliser les conditions pour afficher la bonne blague.\nOuvre un notebook intitul√© : 3_projet1.ipynb\n\n\n5.6.2 √âtapes :\n\nD√©finir trois variables pour stocker le d√©but de chaque blague (debut_blague1, debut_blague2, debut_blague3).\nD√©finir trois autres variables pour stocker la r√©ponse √† chaque blague (reponse_blague1, reponse_blague2, reponse_blague3).\nDemander √† l‚Äôutilisateur de choisir un num√©ro de blague entre 1 et 3 √† l‚Äôaide de la fonction input(). Stocker ce choix dans une variable numero_blague.\nUtiliser des conditions if/elif/else pour afficher la blague et sa r√©ponse en fonction du choix de l‚Äôutilisateur :\n\nSi numero_blague est √©gal √† ‚Äú1‚Äù, afficher debut_blague1 et reponse_blague1.\nSi numero_blague est √©gal √† ‚Äú2‚Äù, afficher debut_blague2 et reponse_blague2.\nSi numero_blague est √©gal √† ‚Äú3‚Äù, afficher debut_blague3 et reponse_blague3.\nSi numero_blague n‚Äôest ni ‚Äú1‚Äù, ni ‚Äú2‚Äù, ni ‚Äú3‚Äù, afficher un message d‚Äôerreur indiquant que seules les blagues 1 √† 3 sont disponibles.\n\n\n\n\n\n\n\n\nConseils\n\n\n\n\n\n\nUtilise des noms de variables explicites pour faciliter la lecture de ton code.\nN‚Äôoublie pas les deux-points : apr√®s chaque condition if/elif/else.\nUtilise la fonction print() pour afficher du texte.\n\n\n\n\nAmuse-toi bien avec ce projet et n‚Äôh√©site pas √† partager tes meilleures (ou pires) blagues ! üòÑ\n\n\nVoir la correction\n'''\nCommen√ßons par d√©finir les variables qui vont\nstocker les diff√©rentes parties de nos blagues nulles :\n'''\n\ndebut_blague1 = \"Pourquoi est-ce que le poulet a travers√© la route ?\"\ndebut_blague2 = \"Que dit un informaticien quand il s'ennuie ?\"\ndebut_blague3 = \"Quel est le comble pour un √©lectricien ?\"\n\nreponse_blague1 = \"Pour aller de l'autre c√¥t√© !\"\nreponse_blague2 = \"Je me fichier !\"\nreponse_blague3 = \"De ne pas √™tre au courant !\"\n\n# L'utilisateur choisi un num√©ro de blague :\nnumero_blague = input(\"Choisissez un num√©ro de blague entre 1 et 3 : \")\n\n'''\nV√©rifions que l'utilisateur a bien entr√© un nombre\nvalide avec des conditions if/elif/else :\n'''\n\nif numero_blague == \"1\":\n    print(debut_blague1)\n    print(\"R√©ponse :\", reponse_blague1)\nelif numero_blague == \"2\":\n    print(debut_blague2)  \n    print(\"R√©ponse :\", reponse_blague2)\nelif numero_blague == \"3\":\n    print(debut_blague3)\n    print(\"R√©ponse :\", reponse_blague3)\nelse:\n    print(\"D√©sol√©, je ne connais que 3 blagues ! Essayez un nombre entre 1 et 3.\")"
  },
  {
    "objectID": "cours/python_intro.html#les-listes",
    "href": "cours/python_intro.html#les-listes",
    "title": "Python : Introduction √† la programmation",
    "section": "6.1 Les listes",
    "text": "6.1 Les listes"
  },
  {
    "objectID": "cours/python_intro.html#les-cha√Ænes-de-caract√®res",
    "href": "cours/python_intro.html#les-cha√Ænes-de-caract√®res",
    "title": "Python : Introduction √† la programmation",
    "section": "6.2 Les cha√Ænes de caract√®res",
    "text": "6.2 Les cha√Ænes de caract√®res\nC‚Äôest quoi une cha√Æne de caract√®res (str) ?\nC‚Äôest tout simplement une s√©quence de caract√®res, comme un mot ou une phrase. En Python, on les d√©limite par des guillemets simples ('...'), doubles (\"...\") ou triples ('''...''' ou \"\"\"...\"\"\" pour les cha√Ænes sur plusieurs lignes).\nPar exemple :\n\nmon_mot = \"Hello\"\nma_phrase = \"Le Python, c'est trop cool !\"\n\n\n\n\n\n\n\nCha√Ænes de caract√®res immuables\n\n\n\n\n\nMais attention, contrairement √† d‚Äôautres langages, les cha√Ænes en Python sont immuables. √áa veut dire qu‚Äôon ne peut pas modifier un caract√®re directement. Si on veut changer un caract√®re, il faut cr√©er une nouvelle cha√Æne.\n\n\n\n\n6.2.1 Les caract√®res d‚Äô√©chappement\nPar exemple tu souhaites inclure un caract√®re ‚Äúill√©gal‚Äù dans une cha√Æne, comme un guillemet double √† l‚Äôint√©rieur d‚Äôune cha√Æne entour√©e de guillemets doubles. Si tu fais √ßa :\ntexte = \"Nous sommes les \"Vikings\" du nord.\"\nPython va r√¢ler et vous dire ‚ÄúH√©, j‚Äôcomprends plus rien l√† !‚Äù üò°\nC‚Äôest l√† qu‚Äôinterviennent les caract√®res d‚Äô√©chappement ! Ce sont des caract√®res sp√©ciaux, pr√©c√©d√©s d‚Äôun backslash \\, qui permettent d‚Äôinclure des caract√®res normalement interdits dans une cha√Æne.\nComment √ßa marche ?\nPour √©chapper un caract√®re, il suffit de mettre un backslash \\ juste avant. Par exemple, pour inclure un guillemet double dans une cha√Æne entour√©e de guillemets doubles :\ntexte = \"Nous sommes les \\\"Vikings\\\" du nord.\"\nLe backslash avant le guillemet double dit √† Python ‚ÄúAttention, le caract√®re suivant est sp√©cial, ne le consid√®re pas comme la fin de la cha√Æne !‚Äù\nLes principaux caract√®res d‚Äô√©chappement\nVoici une petite liste des principaux caract√®res d‚Äô√©chappement :\n\n\n\nCaract√®re\nDescription\nExemple\n\n\n\n\n\\'\nGuillemet simple\n'C\\'est un exemple'\n\n\n\\\"\nGuillemet double\n\"Voici un \\\"exemple\\\"\"\n\n\n\\\\\nBackslash\n\"C:\\\\Users\\\\John\"\n\n\n\\n\nNouvelle ligne\n\"Bonjour,\\ncomment allez-vous ?\"\n\n\n\\t\nTabulation\n\"Nom:\\tJohn\\nPr√©nom:\\tDoe\"\n\n\n\\r\nRetour chariot\n\"Texte\\rTexte sur la m√™me ligne\"\n\n\n\\b\nRetour arri√®re\n\"Texte\\b\\b corrig√©\"\n\n\n\\f\nSaut de page\n\"Page 1\\fPage 2\"\n\n\n\nQuelques explications suppl√©mentaires :\n\nLe caract√®re \\' permet d‚Äôinclure un guillemet simple dans une cha√Æne entour√©e de guillemets simples.\nLe caract√®re \\\" permet d‚Äôinclure un guillemet double dans une cha√Æne entour√©e de guillemets doubles.\nLe double backslash \\\\ permet d‚Äôinclure un backslash litt√©ral dans une cha√Æne.\n\\n ins√®re un retour √† la ligne, \\t une tabulation, \\r un retour chariot.\n\\b fait un retour arri√®re (supprime le caract√®re pr√©c√©dent), utile pour corriger des erreurs de frappe.\n\\f indique un saut de page, surtout utilis√© pour les impressions.\n\nPar exemple, pour ajouter un retour √† la ligne dans une cha√Æne :\n\nprint(\"Bonjour,\\ncomment allez-vous ?\")\n\nBonjour,\ncomment allez-vous ?\n\n\n\n\n\n\n\n\nles raw strings\n\n\n\n\n\nSi ta cha√Æne contient beaucoup de backslashs (comme dans un chemin Windows), utilise des ‚Äúraw strings‚Äù en ajoutant un r devant la cha√Æne :\nchemin = r\"C:\\Users\\John\\Documents\"\nAvec le r, Python consid√®re tous les backslashs comme des caract√®res normaux et non comme des caract√®res d‚Äô√©chappement.\n\n\n\n\n\n6.2.2 Elements d‚Äôune cha√Æne\nPour conna√Ætre le nombre de caract√®res dans une cha√Æne, rien de plus simple : utilise la fonction len() ! Elle renvoie un entier repr√©sentant la longueur de la cha√Æne.\n\ntexte = \"Bonjour tout le monde !\"\nprint(len(texte))  \n\n23\n\n\nIci, la cha√Æne texte contient 23 caract√®res espaces et ponctuation compris.\nTu veux savoir si certain mot ou une certaine s√©quence de caract√®res est pr√©sent dans la cha√Æne ? Utilise l‚Äôop√©rateur in ! Il renvoie True si la sous-cha√Æne est pr√©sente, False sinon.\n\nphrase = \"La vie est belle !\"\nprint(\"vie\" in phrase) \nprint(\"mort\" in phrase)  \n\nTrue\nFalse\n\n\nTu peux √©galement utiliser in dans une structure conditionnelle :\n\nif \"vie\" in phrase:\n    print(\"Le mot 'vie' est pr√©sent dans la phrase.\")\n\nLe mot 'vie' est pr√©sent dans la phrase.\n\n\n√Ä l‚Äôinverse, tu peux v√©rifier qu‚Äôune sous-cha√Æne n‚Äôest PAS pr√©sente dans une cha√Æne avec l‚Äôop√©rateur not in :\n\nphrase = \"La vie est belle !\"\nprint(\"mort\" not in phrase)  \n\nTrue\n\n\nEt comme pour in, tu peux l‚Äôutiliser dans une condition :\n\nif \"mort\" not in phrase:\n    print(\"Le mot 'mort' n'est pas pr√©sent dans la phrase.\")\n\nLe mot 'mort' n'est pas pr√©sent dans la phrase.\n\n\n\n\n6.2.3 Indexation et Slicing\nOn peut facilement naviguer dans une cha√Æne comme dans une carte au tr√©sor gr√¢ce √† l‚Äôindexation et au slicing\nIndexation\nImagine une cha√Æne comme une grande armoire √† tiroirs, o√π chaque tiroir contient un caract√®re. L‚Äôindexation, c‚Äôest le fait d‚Äôouvrir un tiroir pr√©cis pour r√©cup√©rer le caract√®re qu‚Äôil contient.\nEn Python, chaque caract√®re a un num√©ro de tiroir, appel√© ‚Äúindex‚Äù. Mais attention, on commence √† compter √† partir de 0 ! Donc dans le mot ‚ÄúPython‚Äù, ‚ÄòP‚Äô a l‚Äôindex 0, ‚Äòy‚Äô a l‚Äôindex 1, etc.\n\n\n\n\nmot = \"Python\"\nprint(mot[0]) \nprint(mot[1])  \n\nP\ny\n\n\nSlicing\nSi on veut r√©cup√©rer une partie de la cha√Æne (une ‚Äútranche‚Äù), c‚Äôest l√† qu‚Äôintervient le slicing.\nLe slicing utilise la syntaxe [d√©but:fin:pas]. Tu indiques l‚Äôindex de d√©but, l‚Äôindex de fin (non inclus), et √©ventuellement le pas (le nombre de caract√®res √† sauter entre chaque caract√®re r√©cup√©r√©).\n\n\n\n\n\n\nPetits tips de pro\n\n\n\n\n\n\nSi tu omets l‚Äôindex de d√©but, Python part du d√©but de la cha√Æne.\nSi tu omets l‚Äôindex de fin, Python va jusqu‚Äô√† la fin de la cha√Æne.\nSi tu mets un index n√©gatif, Python part de la fin de la cha√Æne !\n\n\n\n\n\nmessage = \"Bonjour tout le monde !\"\nprint(message[0:7])    \nprint(message[8:15])   \nprint(message[::2])    \n\nmot = \"Python\"\nprint(mot[0:2]) \nprint(mot[2:5]) \nprint(mot[0:6:2]) \n\nBonjour\ntout le\nBnortu emne!\nPy\ntho\nPto\n\n\nC‚Äôest super pratique pour extraire des morceaux sp√©cifiques d‚Äôune cha√Æne.\n\n\n6.2.4 Combiner des str\nC‚Äôest un truc super utile pour construire des messages dynamiques ou formater des donn√©es.\nLa fa√ßon la plus simple de combiner des cha√Ænes, c‚Äôest d‚Äôutiliser l‚Äôop√©rateur +. Il permet de ‚Äúcoller‚Äù deux cha√Ænes bout √† bout.\n\nprenom = \"John\"\nnom = \"Doe\"\nnom_complet = prenom + \" \" + nom\nprint(nom_complet)  \n\nJohn Doe\n\n\nIci, on concat√®ne la cha√Æne prenom, un espace \" \", et la cha√Æne nom pour obtenir le nom complet.\n‚ö†Ô∏è Attention cependant, + ne fonctionne qu‚Äôavec des cha√Ænes ! Si tu essayes de concat√©ner une cha√Æne et un nombre, Python va r√¢ler :\nage = 25\nmessage = \"J'ai \" + age + \" ans.\"  # Erreur : on ne peut pas concat√©ner str et int\nPour r√©soudre ce probl√®me, il faut convertir, ‚Äúcast√©‚Äù, le nombre en cha√Æne avec str() :\n\nage = 25\nmessage = \"J'ai \" + str(age) + \" ans.\"  # OK\n\nInterpolation avec les f-strings\nComme tu l‚Äôas vu plus haut, il existe une fa√ßon plus √©l√©gante de combiner des cha√Ænes et des variables : les f-strings !\nIl suffit de pr√©fixer la cha√Æne avec f et d‚Äôinclure les variables entre accolades {}.\n\nprenom = \"M√©nyssa\"\nage = 25\nmessage = f\"Je m'appelle {prenom} et j'ai {age} ans.\"\nprint(message) \n\nJe m'appelle M√©nyssa et j'ai 25 ans.\n\n\nOn peut aussi ajouter un modifier apr√®s le placeholder, en utilisant le symbole : suivi d‚Äôun format. Par exemple, .2f pour afficher un nombre avec 2 d√©cimales :\n\nprix = 9.990009\nmessage = f\"Le prix est de {prix:.2f} euros.\"\nprint(message)  \n\nLe prix est de 9.99 euros.\n\n\nQuelques modifiers utiles : - .2f : nombre √† virgule avec 2 d√©cimales - d : entier - s : cha√Æne de caract√®res - % : pourcentage\n\nscore = 0.9\nmessage = f\"Votre score est de {score:.0%}.\"\nprint(message)  # Affiche \"Votre score est de 90%.\"\n\nVotre score est de 90%.\n\n\nOn peut m√™me appeler des fonctions dans un placeholder ! Imagine qu‚Äôon veuille mettre en majuscules un nom :\n\nnom = \"dupont\"\nmessage = f\"Bonjour {nom.upper()}, comment allez-vous ?\"\nprint(message)  \n\nBonjour DUPONT, comment allez-vous ?\n\n\nIci, la fonction upper() est appel√©e directement dans le placeholder pour mettre le nom en majuscules.\nC‚Äôest beaucoup plus lisible, non ? Et plus besoin de se soucier du type des variables, Python g√®re la conversion tout seul.\nJointure avec join()\nEnfin, si tu as une liste de cha√Ænes et que tu souhaites les combiner en une seule cha√Æne, tu peux utiliser la m√©thode join() :\n\nmots = [\"Hello\", \"world\", \"!\"]\nmessage = \" \".join(mots) \nprint(message) \n\nHello world !\n\n\n\n\n6.2.5 Les m√©thodes sp√©cifiques\nEnfin, Python offre plein de m√©thodes* pratiques pour manipuler les cha√Ænes, comme find() pour chercher une sous-cha√Æne, replace() pour remplacer des caract√®res, ou encore split() pour d√©couper une cha√Æne en liste selon un s√©parateur.\n\n\n\n\n\n\nUne m√©thode\n\n\n\n\n\n* Les m√©thodes sont un concept fondamental de la programmation orient√©e objet. Elles permettent de d√©finir le comportement des objets, comment ils r√©agissent aux diff√©rentes op√©rations.\nQuelques points cl√©s sur les m√©thodes :\n\nUne m√©thode est toujours d√©finie dans le contexte d‚Äôune classe. Elle fait partie int√©grante de la d√©finition de cette classe.\nQuand on cr√©e un objet √† partir d‚Äôune classe (on dit qu‚Äôon instancie la classe), cet objet a acc√®s √† toutes les m√©thodes d√©finies dans sa classe.\nUne m√©thode peut acc√©der et souvent modifier les donn√©es (attributs) de l‚Äôobjet sur lequel elle est appel√©e. C‚Äôest ce qu‚Äôon appelle l‚Äô√©tat interne de l‚Äôobjet.\nPour appeler une m√©thode sur un objet, on utilise la notation objet.methode(). C‚Äôest ce qu‚Äôon a fait dans les exemples avec les cha√Ænes de caract√®res.\n\nDonc quand on √©crit prenom.upper(), upper() est une m√©thode de la classe str (la classe des cha√Ænes de caract√®res). Elle est appel√©e sur l‚Äôobjet prenom et renvoie une nouvelle cha√Æne en majuscules.\n\n\n\nAvant de se lancer, il y a une chose essentielle √† savoir :\n‚ö†Ô∏è Toutes les m√©thodes de cha√Ænes renvoient de nouvelles valeurs. Elles ne modifient pas la cha√Æne d‚Äôorigine. ‚ö†Ô∏è\nGarde bien √ßa en t√™te, c‚Äôest crucial pour √©viter les bugs ! üòâ Allez, c‚Äôest parti pour un tour d‚Äôhorizon complet avec plein d‚Äôexemples concrets ! üöÄ\ncapitalize() : mettre la premi√®re lettre en majuscule üî†\n\nprenom = \"m√©nyssa\"\nprint(prenom.capitalize()) \nprint(prenom) \n\nM√©nyssa\nm√©nyssa\n\n\nlower() et upper() : convertir en minuscules ou majuscules üî°\n\nprenom = \"M√©nyssa\"\nprint(prenom.lower()) \nprint(prenom.upper()) \nprint(prenom)  \n\nm√©nyssa\nM√âNYSSA\nM√©nyssa\n\n\ncount() : compter le nombre d‚Äôoccurrences d‚Äôune sous-cha√Æne üî¢\n\nprenom = \"M√©nyssa\"\nprint(prenom.count(\"s\")) \nprint(prenom)  \n\n2\nM√©nyssa\n\n\nstartswith() et endswith() : v√©rifier le d√©but ou la fin d‚Äôune cha√Æne üîç\n\nprenom = \"M√©nyssa\"\nprint(prenom.startswith(\"M\"))  \nprint(prenom.endswith(\"a\")) \nprint(prenom) \n\nTrue\nTrue\nM√©nyssa\n\n\nfind() et index() : trouver la position d‚Äôune sous-cha√Æne üìç\n\nprenom = \"M√©nyssa\"\nprint(prenom.find(\"y\"))  \nprint(prenom.index(\"s\"))  \nprint(prenom)  \n\n3\n4\nM√©nyssa\n\n\nLa diff√©rence : find() renvoie -1 si la sous-cha√Æne n‚Äôest pas trouv√©e, index() l√®ve une erreur.\nisalpha(), isdigit(), isalnum() : v√©rifier le type de caract√®res üî†üî¢\n\nprenom = \"M√©nyssa\"\nprint(prenom.isalpha()) \nprint(prenom.isdigit()) \nprint(prenom.isalnum()) \nprint(prenom) \n\nTrue\nFalse\nTrue\nM√©nyssa\n\n\njoin() : assembler une liste de cha√Ænes üß©\n\nprenoms = [\"M√©nyssa\", \"Alice\", \"Bob\"]\nprint(\", \".join(prenoms))  \nprint(prenoms)  \n\nM√©nyssa, Alice, Bob\n['M√©nyssa', 'Alice', 'Bob']\n\n\nsplit() : d√©couper une cha√Æne en liste üî™\n\nprenoms = \"M√©nyssa,Alice,Bob\"\nprint(prenoms.split(\",\"))  \n\n['M√©nyssa', 'Alice', 'Bob']\n\n\nreplace() : remplacer une sous-cha√Æne par une autre üîÑ\n\nprenom = \"M√©nyssa\"\nprint(prenom.replace(\"M\", \"A\"))  \nprint(prenom)  \n\nA√©nyssa\nM√©nyssa\n\n\nstrip(), lstrip(), rstrip() : supprimer les espaces üßπ\n\nprenom = \"  M√©nyssa  \"\nprint(prenom.strip())  \nprint(prenom.lstrip())  \nprint(prenom.rstrip())  \nprint(prenom)  \n\nM√©nyssa\nM√©nyssa  \n  M√©nyssa\n  M√©nyssa  \n\n\nVoil√†, tu as maintenant un bel arsenal de m√©thodes pour manipuler les cha√Ænes de caract√®res en Python ! Et surtout, tu sais que ces m√©thodes ne modifient pas la cha√Æne d‚Äôorigine, ce qui t‚Äô√©vitera bien des surprises.\n\n\n\n\n\n\n√Ä Retenir\n\n\n\n\n\nVoici les points cl√©s √† retenir sur les cha√Ænes de caract√®res :\n\nLes cha√Ænes sont des s√©quences üìú\n\nComme les listes et les tuples, les cha√Ænes sont des s√©quences. Cela signifie qu‚Äôon peut acc√©der √† chaque caract√®re par son index, parcourir la cha√Æne avec une boucle for, utiliser le slicing, etc.\nprenom = \"M√©nyssa\"\nprint(prenom[0])  # Affiche \"M\"\nprint(prenom[-1])  # Affiche \"a\"\nprint(prenom[1:4])  # Affiche \"√©ny\"\n\nLes cha√Ænes sont immuables üîí\n\nUne fois cr√©√©e, une cha√Æne ne peut pas √™tre modifi√©e. Toutes les op√©rations qui semblent modifier une cha√Æne (comme les m√©thodes upper(), replace(), etc.) renvoient en fait une nouvelle cha√Æne.\nprenom = \"M√©nyssa\"\nprenom_maj = prenom.upper()\nprint(prenom)  # Affiche \"M√©nyssa\" (inchang√©)\nprint(prenom_maj)  # Affiche \"M√âNYSSA\" (nouvelle cha√Æne)\n\nLes m√©thodes ne modifient pas la cha√Æne d‚Äôorigine üÜï\n\nC‚Äôest une cons√©quence directe de l‚Äôimmuabilit√© des cha√Ænes. Quand vous appelez une m√©thode sur une cha√Æne, cela ne change pas la cha√Æne d‚Äôorigine, mais renvoie une nouvelle cha√Æne.\nmessage = \"Bonjour M√©nyssa\"\nmessage.replace(\"Bonjour\", \"Salut\")\nprint(message)  # Affiche toujours \"Bonjour M√©nyssa\"\nPour vraiment changer la cha√Æne, il faut r√©assigner le r√©sultat de la m√©thode √† la variable :\nmessage = \"Bonjour M√©nyssa\"\nmessage = message.replace(\"Bonjour\", \"Salut\")\nprint(message)  # Affiche maintenant \"Salut M√©nyssa\"\n\nLes cha√Ænes ont de nombreuses m√©thodes utiles üß∞\n\nPython fournit un grand nombre de m√©thodes pour manipuler les cha√Ænes. Certaines des plus utiles sont :\n\nupper(), lower(), capitalize() pour changer la casse\nstrip(), lstrip(), rstrip() pour supprimer les espaces\nstartswith(), endswith() pour v√©rifier le d√©but ou la fin\nfind(), index() pour chercher une sous-cha√Æne\nreplace() pour remplacer une sous-cha√Æne par une autre\nsplit() pour d√©couper une cha√Æne en liste\njoin() pour assembler une liste en cha√Æne\n\n\n\n\n\n\n6.2.6 Challenge Time! üöÄ\nToujours dans le notebook : 4_Structures_donnees.ipynb mets tes connaissances √† l‚Äô√©preuve avec ces exercices rapides :\nVoici une s√©rie d‚Äôexercices originaux sur les cha√Ænes de caract√®res en Python, sans utiliser de fonctions :\n\n6.2.6.1 Palindrome\n\nDemande √† l‚Äôutilisateur de saisir un mot.\nV√©rifie si ce mot est un palindrome (mot qui se lit de la m√™me fa√ßon de gauche √† droite et de droite √† gauche) en comparant chaque lettre du d√©but avec chaque lettre de la fin.\nAffiche ‚ÄúC‚Äôest un palindrome !‚Äù si c‚Äôest le cas, ‚ÄúCe n‚Äôest pas un palindrome.‚Äù sinon.\n\n\n\n\n\n\n\nAstuce\n\n\n\n\n\n\nPense √† utiliser le slicing pour comparer le mot et son inverse, comme mot == mot[::-1]\nN‚Äôoublie pas de convertir le mot en minuscules avant de v√©rifier s‚Äôil est un palindrome, pour √©viter les probl√®mes de casse\nTu peux aussi utiliser une boucle pour comparer chaque lettre du d√©but avec chaque lettre de la fin\n\n\n\n\n\n\nVoir la correction\nmot = input(\"Entrez un mot : \")\nmot = mot.lower()\n\nif mot == mot[::-1]:\n    print(\"C'est un palindrome !\")\nelse:\n    print(\"Ce n'est pas un palindrome.\")\n\n\n\n\n6.2.6.2 Majuscules et minuscules\n\nDemande √† l‚Äôutilisateur de saisir une phrase.\nParcours chaque caract√®re de la phrase. Si c‚Äôest une voyelle, mets-la en majuscule. Si c‚Äôest une consonne, mets-la en minuscule.\nAffiche la nouvelle phrase.\n\n\n\n\n\n\n\nAstuce\n\n\n\n\n\n\nUtilise les m√©thodes upper() et lower() pour convertir les lettres en majuscules ou minuscules\nTu peux v√©rifier si un caract√®re est une voyelle avec caractere in ‚ÄòaeiouyAEIOUY‚Äô\nPense √† cr√©er une nouvelle cha√Æne pour stocker le r√©sultat, plut√¥t que de modifier la phrase d‚Äôorigine\n\n\n\n\n\n\nVoir la correction\nphrase = input(\"Entrez une phrase : \")\nnouvelle_phrase = \"\"\n\nfor caractere in phrase:\n    if caractere.lower() in 'aeiouy':\n        nouvelle_phrase += caractere.upper()\n    else:\n        nouvelle_phrase += caractere.lower()\n\nprint(nouvelle_phrase)\n\n\n\n\n6.2.6.3 Compteur de mots\n\nDemande √† l‚Äôutilisateur de saisir une phrase.\nInitialise un compteur √† 1 (pour le premier mot).\nParcours chaque caract√®re de la phrase. Si c‚Äôest un espace et que le caract√®re pr√©c√©dent n‚Äô√©tait pas un espace, incr√©mente le compteur.\nAffiche le nombre final de mots.\n\n\n\n\n\n\n\nAstuce\n\n\n\n\n\n\nUtilise la m√©thode split() pour d√©couper la phrase en mots, puis utilise len() pour compter le nombre de mots\nSi tu veux le faire manuellement, pense √† v√©rifier si le caract√®re pr√©c√©dent √©tait un espace avant d‚Äôincr√©menter le compteur, pour √©viter de compter plusieurs espaces cons√©cutifs comme plusieurs mots\n\n\n\n\n\n\nVoir la correction\nphrase = input(\"Entrez une phrase : \")\nmots = phrase.split()\nnombre_mots = len(mots)\n\nprint(\"Il y a\", nombre_mots, \"mots dans cette phrase.\")\n\n\n\n\n6.2.6.4 Inversion de cha√Æne\n\nDemande √† l‚Äôutilisateur de saisir un mot.\nCr√©e une nouvelle cha√Æne vide pour stocker le mot invers√©.\nParcours le mot de la fin vers le d√©but, et ajoute chaque lettre √† la nouvelle cha√Æne.\nAffiche le mot invers√©.\n\n\n\n\n\n\n\nAstuce\n\n\n\n\n\n\nL√† encore, le slicing peut √™tre tr√®s utile : chaine[::-1] te donne directement la cha√Æne invers√©e\nSi tu veux le faire avec une boucle, pars de la fin de la cha√Æne et va vers le d√©but, en ajoutant chaque lettre √† une nouvelle cha√Æne\n\n\n\n\n\n\nVoir la correction\nmot = input(\"Entrez un mot : \")\nmot_inverse = mot[::-1]\n\nprint(\"Le mot invers√© est :\", mot_inverse)"
  },
  {
    "objectID": "cours/python_intro.html#les-tuples",
    "href": "cours/python_intro.html#les-tuples",
    "title": "Python : Introduction √† la programmation",
    "section": "6.3 Les tuples",
    "text": "6.3 Les tuples"
  },
  {
    "objectID": "cours/python_intro.html#les-ensembles",
    "href": "cours/python_intro.html#les-ensembles",
    "title": "Python : Introduction √† la programmation",
    "section": "6.4 Les ensembles",
    "text": "6.4 Les ensembles"
  },
  {
    "objectID": "cours/python_intro.html#les-dictionnaires",
    "href": "cours/python_intro.html#les-dictionnaires",
    "title": "Python : Introduction √† la programmation",
    "section": "6.5 Les dictionnaires",
    "text": "6.5 Les dictionnaires"
  },
  {
    "objectID": "cours/python_intro.html#projet-2-juste-prix",
    "href": "cours/python_intro.html#projet-2-juste-prix",
    "title": "Python : Introduction √† la programmation",
    "section": "7.1 Projet 2 : Juste prix",
    "text": "7.1 Projet 2 : Juste prix"
  },
  {
    "objectID": "cours/python_intro.html#projet-3-casino",
    "href": "cours/python_intro.html#projet-3-casino",
    "title": "Python : Introduction √† la programmation",
    "section": "7.2 Projet 3 : Casino",
    "text": "7.2 Projet 3 : Casino"
  },
  {
    "objectID": "cours/python_intro.html#projet-4-pendu",
    "href": "cours/python_intro.html#projet-4-pendu",
    "title": "Python : Introduction √† la programmation",
    "section": "7.3 Projet 4 : Pendu",
    "text": "7.3 Projet 4 : Pendu"
  },
  {
    "objectID": "cours/python_intro.html#les-param√®tres-et-arguments",
    "href": "cours/python_intro.html#les-param√®tres-et-arguments",
    "title": "Python : Introduction √† la programmation",
    "section": "8.1 Les param√®tres et arguments",
    "text": "8.1 Les param√®tres et arguments"
  },
  {
    "objectID": "cours/python_intro.html#les-types-de-fonctions",
    "href": "cours/python_intro.html#les-types-de-fonctions",
    "title": "Python : Introduction √† la programmation",
    "section": "8.2 Les types de fonctions",
    "text": "8.2 Les types de fonctions"
  },
  {
    "objectID": "cours/python_intro.html#la-port√©e-des-variables",
    "href": "cours/python_intro.html#la-port√©e-des-variables",
    "title": "Python : Introduction √† la programmation",
    "section": "8.3 La port√©e des variables",
    "text": "8.3 La port√©e des variables"
  },
  {
    "objectID": "cours/python_intro.html#nombre-variable-darguments",
    "href": "cours/python_intro.html#nombre-variable-darguments",
    "title": "Python : Introduction √† la programmation",
    "section": "8.4 Nombre variable d‚Äôarguments",
    "text": "8.4 Nombre variable d‚Äôarguments"
  },
  {
    "objectID": "cours/python_intro.html#les-fonctions-anonymes-lambda",
    "href": "cours/python_intro.html#les-fonctions-anonymes-lambda",
    "title": "Python : Introduction √† la programmation",
    "section": "8.5 Les fonctions anonymes : lambda",
    "text": "8.5 Les fonctions anonymes : lambda"
  },
  {
    "objectID": "cours/python_intro.html#les-fonctions-et-la-r√©cursivit√©",
    "href": "cours/python_intro.html#les-fonctions-et-la-r√©cursivit√©",
    "title": "Python : Introduction √† la programmation",
    "section": "8.6 Les fonctions et la r√©cursivit√©",
    "text": "8.6 Les fonctions et la r√©cursivit√©"
  },
  {
    "objectID": "cours/python_intro.html#g√©n√©rateurs-et-d√©corateurs",
    "href": "cours/python_intro.html#g√©n√©rateurs-et-d√©corateurs",
    "title": "Python : Introduction √† la programmation",
    "section": "8.7 G√©n√©rateurs et d√©corateurs",
    "text": "8.7 G√©n√©rateurs et d√©corateurs"
  },
  {
    "objectID": "cours/python_intro.html#exercices-3",
    "href": "cours/python_intro.html#exercices-3",
    "title": "Python : Introduction √† la programmation",
    "section": "8.8 Exercices 3",
    "text": "8.8 Exercices 3"
  },
  {
    "objectID": "cours/python_intro.html#d√©finition",
    "href": "cours/python_intro.html#d√©finition",
    "title": "Python : Introduction √† la programmation",
    "section": "9.1 D√©finition",
    "text": "9.1 D√©finition"
  },
  {
    "objectID": "cours/python_intro.html#traitement-des-exceptions",
    "href": "cours/python_intro.html#traitement-des-exceptions",
    "title": "Python : Introduction √† la programmation",
    "section": "9.2 Traitement des exceptions",
    "text": "9.2 Traitement des exceptions\n\n9.2.1 Try-Except\n\n\n9.2.2 Finally\n\n\n9.2.3 Else"
  },
  {
    "objectID": "cours/python_intro.html#assertions",
    "href": "cours/python_intro.html#assertions",
    "title": "Python : Introduction √† la programmation",
    "section": "9.3 Assertions",
    "text": "9.3 Assertions"
  },
  {
    "objectID": "cours/python_intro.html#raise",
    "href": "cours/python_intro.html#raise",
    "title": "Python : Introduction √† la programmation",
    "section": "9.4 Raise",
    "text": "9.4 Raise"
  },
  {
    "objectID": "cours/python_intro.html#projet-2-bis-casino-avec-exceptions",
    "href": "cours/python_intro.html#projet-2-bis-casino-avec-exceptions",
    "title": "Python : Introduction √† la programmation",
    "section": "9.5 Projet 2 bis : Casino avec exceptions",
    "text": "9.5 Projet 2 bis : Casino avec exceptions"
  },
  {
    "objectID": "cours/python_intro.html#exercices-4",
    "href": "cours/python_intro.html#exercices-4",
    "title": "Python : Introduction √† la programmation",
    "section": "9.6 Exercices 4",
    "text": "9.6 Exercices 4"
  },
  {
    "objectID": "cours/python_intro.html#gestion-simple-des-fichiers",
    "href": "cours/python_intro.html#gestion-simple-des-fichiers",
    "title": "Python : Introduction √† la programmation",
    "section": "10.1 Gestion simple des fichiers",
    "text": "10.1 Gestion simple des fichiers"
  },
  {
    "objectID": "cours/python_intro.html#travailler-avec-diff√©rents-formats-de-fichier",
    "href": "cours/python_intro.html#travailler-avec-diff√©rents-formats-de-fichier",
    "title": "Python : Introduction √† la programmation",
    "section": "10.2 Travailler avec diff√©rents formats de fichier",
    "text": "10.2 Travailler avec diff√©rents formats de fichier"
  },
  {
    "objectID": "cours/python_intro.html#exercices-5",
    "href": "cours/python_intro.html#exercices-5",
    "title": "Python : Introduction √† la programmation",
    "section": "10.3 Exercices 5",
    "text": "10.3 Exercices 5"
  },
  {
    "objectID": "cours/python_intro.html#projet-4-trieur-de-fichier",
    "href": "cours/python_intro.html#projet-4-trieur-de-fichier",
    "title": "Python : Introduction √† la programmation",
    "section": "10.4 Projet 4 : Trieur de fichier",
    "text": "10.4 Projet 4 : Trieur de fichier"
  },
  {
    "objectID": "cours/python_intro.html#exercices-6",
    "href": "cours/python_intro.html#exercices-6",
    "title": "Python : Introduction √† la programmation",
    "section": "11.1 Exercices 6",
    "text": "11.1 Exercices 6"
  },
  {
    "objectID": "cours/python_intro.html#projet-5-gestionnaire-de-t√¢ches",
    "href": "cours/python_intro.html#projet-5-gestionnaire-de-t√¢ches",
    "title": "Python : Introduction √† la programmation",
    "section": "12.1 Projet 5 : Gestionnaire de t√¢ches",
    "text": "12.1 Projet 5 : Gestionnaire de t√¢ches"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "D√©couvrir, Assimiler, Ma√Ætriser, Appliquer (DAMA)",
    "section": "",
    "text": "La data science facile, utile et accessible √† tous. Juste l‚Äôessentiel pour pratiquer et performer !\n    \n    \n      Fait avec  et Quarto Voir sur  GitHubPar M√©nyssa Cherifa-Luron, PhD"
  },
  {
    "objectID": "index.html#cours-progresse-en-data-science-√†-ton-rythme",
    "href": "index.html#cours-progresse-en-data-science-√†-ton-rythme",
    "title": "D√©couvrir, Assimiler, Ma√Ætriser, Appliquer (DAMA)",
    "section": " Cours : Progresse en data science √† ton rythme",
    "text": "Cours : Progresse en data science √† ton rythme\nQue tu sois d√©butant, interm√©diaire ou avanc√©, les cours te permettront de monter en comp√©tences en data science, avec des exemples concrets et des exercices adapt√©s. Tu y trouveras :\n\nMa√Ætrise R pour des analyses de donn√©es au top\nG√©n√®re des visualisations √† couper le souffle\nPython pour la data science : de z√©ro √† h√©ros !\nSQL pour la gestion et l‚Äôinterrogation des bases de donn√©es\nMachine Learning : d√©veloppe des mod√®les pr√©dictifs puissants\nEt bien plus encore‚Ä¶\n\nJ‚Äôesp√®re que tu es pr√™t ? Oui ! Alors, pr√©pare-toi devenir un pro et √† d√©velopper tes propres applications en data science.\n\n  \n     Acc√©der aux cours üöÄ"
  },
  {
    "objectID": "index.html#blog-d√©couvre-apprends-partage",
    "href": "index.html#blog-d√©couvre-apprends-partage",
    "title": "D√©couvrir, Assimiler, Ma√Ætriser, Appliquer (DAMA)",
    "section": " Blog : D√©couvre, apprends, partage",
    "text": "Blog : D√©couvre, apprends, partage\nLe blog est un espace de partage et de vulgarisation scientifique autour de la data science. Tu y trouveras :\n\nDes articles de fond pour comprendre les concepts cl√©s\nDes tutoriels pratiques pour monter en comp√©tences\nDes projets et retours d‚Äôexp√©rience inspirants\n\n\n  Acc√©der au blog üöÄ"
  },
  {
    "objectID": "index.html#collaboration",
    "href": "index.html#collaboration",
    "title": "D√©couvrir, Assimiler, Ma√Ætriser, Appliquer (DAMA)",
    "section": " Collaboration",
    "text": "Collaboration\nTu es d√©j√† expert.e et tu souhaites r√©diger un article et/ou cr√©er un cours ?\nTu adh√®res √† l‚Äôesprit Open Learning Source ?\nC‚Äôest avec plaisir, parce que j‚Äôaime les featurings !\n\nüì© Comment contribuer ?\n\nEnvoie-moi un petit mail √† damaestla@gmail.com ou contacte-moi directement sur LinkedIn\nCommence √† r√©diger avec nos templates articles et cours\nSoumets ton contenu, je le revois avec toi et on le publie ensemble !\n\nRejoins la communaut√© DAMA et faisons briller la data science accessible √† tous !\n\n  \n     Collaborer üöÄ"
  },
  {
    "objectID": "mentions_legales.html",
    "href": "mentions_legales.html",
    "title": "Mentions l√©gales",
    "section": "",
    "text": "Publication du site √©dit√© par l‚Äôauto-entreprise :\nM√©nyssa Cherifa-Luron\n11 rue antonio vivaldi\n31300 Toulouse\ndamaestla@gmail.com"
  },
  {
    "objectID": "mentions_legales.html#h√©bergement",
    "href": "mentions_legales.html#h√©bergement",
    "title": "Mentions l√©gales",
    "section": "H√©bergement",
    "text": "H√©bergement\nGitHub Pages (https://pages.github.com/)\nGitHub, Inc.\n88 Colin P. Kelly Jr.¬†Street\nSan Francisco, CA 94107\nUnited States\n+1 (877) 448-4820"
  },
  {
    "objectID": "mentions_legales.html#responsabilit√©",
    "href": "mentions_legales.html#responsabilit√©",
    "title": "Mentions l√©gales",
    "section": "Responsabilit√©",
    "text": "Responsabilit√©\nM√©nyssa Cherifa-Luron met tous ses moyens en ≈ìuvre pour assurer l‚Äôexactitude et la mise √† jour des informations diffus√©es sur ce site. M√©nyssa Cherifa-Luron se r√©serve le droit de corriger, √† tout moment et sans pr√©avis, le contenu. Les renseignements contenus dans ce document sont donn√©s √† titre indicatif et correspondent √† nos connaissances actuelles. Ils ne peuvent en aucun cas engager notre responsabilit√© en cas d‚Äôutilisation non conforme ou inadapt√©e de nos produits.\nM√©nyssa Cherifa-Luron d√©cline toute responsabilit√© pour tous dommages r√©sultant d‚Äôune intrusion frauduleuse d‚Äôun tiers ayant entra√Æn√© une modification des informations sur le site ; et plus g√©n√©ralement pour tous dommages, directs ou indirects, qu‚Äôelles qu‚Äôen soient les causes, origines, nature ou cons√©quences, provoqu√©s √† raison de l‚Äôacc√®s de quiconque au site ou de l‚Äôimpossibilit√© d‚Äôy acc√©der."
  },
  {
    "objectID": "mentions_legales.html#liens",
    "href": "mentions_legales.html#liens",
    "title": "Mentions l√©gales",
    "section": "Liens",
    "text": "Liens\nCe site contient des liens vers d‚Äôautres sites ou sources Internet. M√©nyssa Cherifa-Luron ne pourra √™tre tenu pour responsable de leur mise √† disposition, ni de leur contenu, ni des dommages, de quelque nature que ce soit, subis par les visiteurs qui se rendraient sur ces liens."
  },
  {
    "objectID": "mentions_legales.html#propri√©t√©-intellectuelle-et-industrielle",
    "href": "mentions_legales.html#propri√©t√©-intellectuelle-et-industrielle",
    "title": "Mentions l√©gales",
    "section": "Propri√©t√© intellectuelle et industrielle",
    "text": "Propri√©t√© intellectuelle et industrielle\nL‚Äôensemble de ce site rel√®ve de la l√©gislation fran√ßaise du droit d‚Äôauteur et de la propri√©t√© intellectuelle. Tous les droits de reproduction sont r√©serv√©s y compris pour les documents t√©l√©chargeables. La reproduction de tout document publi√© sur ce site est uniquement autoris√©e pour un usage personnel. Toute reproduction et utilisation de copies r√©alis√©es √† d‚Äôautres fins √©tant express√©ment interdites."
  },
  {
    "objectID": "mentions_legales.html#utilisation-des-donn√©es-personnelles",
    "href": "mentions_legales.html#utilisation-des-donn√©es-personnelles",
    "title": "Mentions l√©gales",
    "section": "Utilisation des donn√©es personnelles",
    "text": "Utilisation des donn√©es personnelles\nM√©nyssa Cherifa-Luron collecte des informations pour identifier vos besoins et vous proposer un meilleur service. Les √©l√©ments de statistique nous permettent de mieux comprendre comment les visiteurs interagissent avec notre site.\nEn application de la loi n¬∞ 78-17 du 6 janvier 1978 relative √† l‚Äôinformatique, aux fichiers et aux libert√©s, vous disposez d‚Äôun droit d‚Äôacc√®s, de rectification ou de suppression des donn√©es vous concernant. Toute demande en ce sens devra √™tre adress√©e √† : M√©nyssa Cherifa-Luron, 11 rue antonio vivaldi, 31300 Toulouse, damaestla@gmail.com. En tout √©tat de cause, la confidentialit√© des informations relatives aux visiteurs de ce site sera pr√©serv√©e."
  }
]
---
title: "Introduction √† Python"
subtitle: "Un peu de r√©visions ne fait pas de mal"
---

Si tu as d√©j√† des notions avanc√©es en prog Python, passe directement au module suivant 

```{=html}
<div style="text-align: center">
  <a href="module1.qmd">
    <button class="button-61"> Go Module 1 ! üöÄ</button>
  </a>
</div>
```

# 1. Introduction  

Alors comme √ßa, tu veux en savoir plus sur les origines de ce langage mythique ? Accroche-toi, je te raconte ! 

<div style="text-align: center;">
  <img src="../images/logo_python.png" alt="logo python" style="width: 400px;">
  <p><em> Fig 1. Logo python</em></p>
</div>

Python, c'est l'≈ìuvre d'un certain Guido van Rossum, qui l'a cr√©√© en 1989. 

Et devine quoi ? Le nom "Python" n'a rien √† voir avec les serpents ! C'est en fait un clin d'≈ìil √† la s√©rie loufoque "Monty Python's Flying Circus". Comme quoi, l'humour et la programmation font bon m√©nage ! üòÑ


Mais Python, c'est bien plus qu'une private joke. Ce langage a de sacr√©s atouts :

‚úÖ Multi-plateforme : il s'adapte √† tous les environnements, tel un cam√©l√©on  

‚úÖ Gratuit et libre : accessible √† tous les padawans de la data

‚úÖ Haut niveau et interpr√©t√© : parfait pour progresser rapidement

‚úÖ Orient√© objet : pour mod√©liser le monde r√©el de fa√ßon intuitive 

‚úÖ Simple et lisible : le code Python se lit presque comme de l'anglais

D√©j√†, si tu veux coder comme un pro, jette un ≈ìil au guide de style Python de Google. C'est un peu la bible des bonnes pratiques, largement suivie dans l'industrie.

Ensuite, parlons environnement de dev. Tu vas s√ªrement bosser sur Jupyter ou Google Colab pour tes notebooks. C'est top, mais attention : si tu bosses sur plusieurs projets, tu vas vite te retrouver avec un joyeux bordel de versions de modules Python ! 

La solution ? Les environnements virtuels ! C'est un peu comme avoir un appart' d√©di√© pour chaque projet, avec ses propres meubles (modules) et sa d√©co (config). Bref, √ßa t'√©vitera bien des maux de t√™te. 

Si tu veux en savoir plus sur les options de setup Python (local vs cloud), jette un oeil √† cet [article](https://aman.ai/primers/python-setup/)

C'est une mine d'or ! 

Enfin, le truc CRUCIAL √† retenir : en Python, l'indentation c'est pas juste pour faire joli. C'est VITAL pour que ton code marche ! Alors on prend direct le pli d'utiliser 4 espaces (pas de tabs, hein ! ).

Bref, Python a tout pour plaire, c'est le couteau suisse du d√©veloppeur !

Alors, partant¬∑e pour plonger dans cet univers merveilleux ? 

On va apprendre, coder et s'amuser ! 

::: {.callout-tip}
# Site officiel
En savoir plus ? Rends toi sur le [site officiel](https://docs.python.org/3/)
:::

# 2. Les Fondamentaux de Python 

## 2.1. Les variables

Les variables, c'est un peu comme des bo√Ætes dans lesquelles tu peux ranger des trucs : des nombres, du texte, etc. 

Par exemple, si tu √©cris `x = 10`, tu cr√©es une variable "x" qui contient la valeur 10. Easy ! 

Le truc cool avec Python, c'est qu'il devine tout seul le type de donn√©es que tu mets dans la variable. 

C'est ce qu'on appelle le typage dynamique. Pratique, non ? 

Quelques r√®gles de base √† retenir sur les variables :

- Pour donner une valeur √† une variable, on utilise le signe √©gal `(=)`. C'est l'affectation.

- Tu peux √©craser la valeur d'une variable en lui r√©affectant une nouvelle valeur. 

- Attention √† la casse ! "maVariable" et "mavariable", pour Python c'est pas pareil. 

- Tu peux afficher plusieurs variables d'un coup avec print() en les s√©parant par des virgules.

- Tu peux affecter plusieurs valeurs √† plusieurs variables sur une seule ligne. Styl√© ! 

Pour les noms de variables, tu as le choix entre :

- la casse camel : monNomDeVariable

- la casse Pascal : MonNomDeVariable  

- la casse serpent : mon_nom_de_variable

√âvite juste de commencer les noms par des chiffres, d'utiliser des caract√®res sp√©ciaux et de m√©langer chiffres et lettres n'importe comment.
```{python}
# Affectation simple 
Ma_variable =  10
print(Ma_variable)

# Affectation de plusieurs valeurs
x, y, z = "Chocolat", "Vanille", "Fraise"

print(x)
print(y)
print(z)

# Affectation de la m√™me valeur
x = y = z = "Chocolat"

print(x)
print(y)
print(z)
```

### 2.1.1. Types de variables

En Python, chaque variable a un type bien pr√©cis. C'est un peu comme les groupes sanguin : A, B, AB ou O. Sauf qu'ici, on a :

- Les entiers (int) : pour les nombres sans virgule. Exemples : 5, -3, 0.

- Les nombres complexes (complex) : pour les maths de l'espace ! Exemple : 3 + 4j.

- Les flottants (float) : pour les nombres √† virgule. Exemples : 3.14, -0.001.

- Les cha√Ænes de caract√®res (str) : pour le texte, entour√© de guillemets. Exemple : "Hello World!"

- Les bool√©ens (bool) : pour les valeurs "vrai" (True) ou "faux" (False). Souvent le r√©sultat de comparaisons.

Pourquoi c'est important de conna√Ætre le type d'une variable ? Parce que tu ne peux pas additionner des pommes et des poires ! Enfin si, mais √ßa donne une compote bizarre... üçé+üçê=ü§¢

Plus s√©rieusement, chaque type a ses propres op√©rations possibles. Tu peux multiplier deux int, concat√©ner deux str, mais pas l'inverse.

Allez, un petit d√©fi : devine le type des variables suivantes (r√©ponse en commentaire) :

- a = 42

- b = "42"

- c = 42.0

- d = True

- e = 2 + 3j
```{python}
# Afficher le type d'une variable
bonjour = "Hello"
type(bonjour) 

# D√©finition de plusieurs variables 
nom = "Alice"
age = 25       
taille = 1.70  
estVrai = True 
estFaux = False 
print("la variable nom est de type :", type(nom))
print("la variable age est de type :",type(age))
print("la variable taille est de type :",type(taille))
print("la variable estVrai est de type :",type(estVrai))
print("la variable estFaux est de type :",type(estFaux))
```

### 2.1.2. Conversion de types

Le casting, c'est un peu comme dans un film : tu prends un acteur (une valeur) et tu lui fais jouer un autre r√¥le (un autre type). üé•

En Python, tu peux facilement convertir entre les types de base comme :

- Les entiers (int)
- Les cha√Ænes de caract√®res (str) 
- Les bool√©ens (bool)
- Les flottants (float)

Voici quelques exemples de casting en action :

üé¨ int ‚û° str

üé¨ str ‚û° int

üé¨ float ‚û° int

üé¨ int ‚û° bool

Mais attention aux pi√®ges ! 

Toutes les conversions ne sont pas possibles, comme transformer un texte en nombre :

`prix = "dix"
prix_int = int(prix)  # Erreur : ValueError`

- Conversion en Entier (`int`) 

```{python}
# Depuis une cha√Æne de caract√®res :
chaine = "123"
nombre = int(chaine)  # Convertit la cha√Æne "123" en entier 123

## Depuis un bool√©en :
vrai = True
entier = int(vrai)  # Convertit True en 1

## Depuis un float :
flottant = 9.99
entier = int(flottant)  # Convertit 9.99 en 9 (troncature, pas d'arrondi)
```

- Conversion en Cha√Æne de Caract√®res (`str`)

```{python}
## Depuis un entier ou un float :
nombre = 123
chaine = str(nombre)  # Convertit l'entier 123 en cha√Æne "123"

## Depuis un bool√©en :
faux = False
chaine = str(faux)  # Convertit False en "False"
```

- Conversion en Bool√©en (`bool`)

```{python}
## Depuis une cha√Æne de caract√®res** :
chaine = ""
booleen = bool(chaine)  # Convertit une cha√Æne vide en False
chaine2 = "Python"
booleen2 = bool(chaine2)  # Convertit "Python" en True

## Depuis un nombre : 
nombre = 0
booleen = bool(nombre)  # Convertit 0 en False
nombre2 = 123
booleen2 = bool(nombre2)  # Convertit 123 en True
```

- Conversion en Float (`float`)

```{python}
## Depuis une cha√Æne de caract√®res:
chaine = "123.45"
flottant = float(chaine)  # Convertit la cha√Æne "123.45" en float 123.45

## Depuis un entier :
entier = 100
flottant = float(entier)  # Convertit l'entier 100 en float 100.0

## Depuis un bool√©en:
vrai = True
flottant = float(vrai)  # Convertit True en 1.0
```

### 2.1.3. Op√©rations arithm√©tiques

En Python, tu peux faire des maths comme un pro avec ces 4 op√©rateurs :

- L'addition (+) : pour ajouter des nombres
Exemple : `3 + 2 = 5`

- La soustraction (-) : pour soustraire des nombres 
Exemple : `5 - 2 = 3`

- La multiplication (*) : pour multiplier des nombres
Exemple : `3 * 2 = 6` 

- La division (/) : pour diviser des nombres
Exemple : `6 / 2 = 3`

Facile, non ? Mais attends, y'a encore plus fort ! Python g√®re aussi :

- Les puissances (**) : pour les exposants
Exemple : `2 ** 3 = 8` (2 puissance 3)

- Les divisions enti√®res (//) : pour obtenir un r√©sultat entier 
Exemple : `7 // 2 = 3`

- Les modulos (%) : pour obtenir le reste d'une division
Exemple : `7 % 2 = 1` (car 7 divis√© par 2 donne 3 reste 1)

```{python}
somme = 10 + 5       # R√©sultat: 15
difference = 10 - 5  # R√©sultat: 5
produit = 10 * 5     # R√©sultat: 50
quotient = 10 / 5    # R√©sultat: 2.0
```

Modulo (%) retourne le reste de la division 
Puissance (**) √©l√®ve un nombre √† une certaine puissance.

```{python}
reste = 10 % 3       # R√©sultat: 1
puissance = 2 ** 3   # R√©sultat: 8
puissance_bis = 2 ^ 3
```

::: {.callout-tip}
## Op√©rations sur les str
Gr√¢ce √† ces 2 op√©rateurs magiques :

- La concat√©nation (`+`) : pour combiner des cha√Ænes
Exemple : "Hello" + " World!" = "Hello World!"

- La r√©p√©tition (`*`) : pour r√©p√©ter une cha√Æne un certain nombre de fois
Exemple : "Ha" `*` 3 = "HaHaHa"

C'est aussi simple que √ßa ! Mais attention, y'a quelques r√®gles √† respecter :

‚ö†Ô∏è Tu ne peux pas concat√©ner des types diff√©rents (string + int par exemple). Faudra d'abord les convertir.

‚ö†Ô∏è La r√©p√©tition ne marche qu'avec des entiers positifs. Pas de "Ha" * -3 ou "LOL" * 2.5 !
:::

### 2.1.4. Op√©rateurs d'affectation compos√©s 

Les op√©rateurs d'affectation compos√©s sont des raccourcis qui combinent une op√©ration arithm√©tique ou binaire avec une affectation.

En gros, ils permettent d'effectuer une op√©ration sur une variable et de lui r√©affecter le r√©sultat en une seule √©tape.

```{python}
# Initialisation de x
x = 5
print(x)
# Ajouter et assigner
x += 2  # x est maintenant 7
print(x)

# Soustraire et assigner
x -= 3  # x est maintenant 4
print(x)

# Multiplier et assigner
x *= 4  # x est maintenant 16
print(x)
# Diviser et assigner
x /= 2  # x est maintenant 8
print(x)
# Division enti√®re et assigner
x //= 3  # x est maintenant 2
print(x)
# Modulo et assigner
x %= 3  # x est maintenant 2
print(x)
# Exponentielle et assigner
x **= 2  # x est maintenant 4
print(x)
```

::: {.callout-important}
## √Ä Retenir

- Une variable est un espace de stockage nomm√© utilis√© pour contenir des donn√©es qui peuvent √™tre modifi√©es pendant l'ex√©cution d'un programme.

- Les types : Entier, Flottant, Cha√Æne de caract√®res, Bool√©en, etc.

- Les op√©rations sur les nombres (Entier, Flottant,Bool√©en) peuvent √™tre : `+` (addition), `-` (soustraction), `*` (multiplication), `/` (division), `%` (modulo).

- Les op√©rateurs pour cha√Ænes de caract√®res sont :    
    - `+` pour la concat√©nation : 'Hello' + ' World' donne 'Hello World'.
    
    - `*` pour la r√©p√©tition : 'Hello' * 3 donne 'HelloHelloHello'.

- Les op√©rateurs compos√©s (`+=`, `-=`, `*=`, `/=`, `%=`) servent √† simplifier l'√©criture des op√©rations en combinant un op√©rateur et une affectation.

:::

## 2.2. Commentaires et affichage
## 2.3. Structures de contr√¥le
### 2.3.1 Les op√©rateurs
### 2.3.2 Les conditions
### 2.3.3 Les boucles
## Exercices 1
## Projet 1 : Juste prix
## Projet 2 : Casino
## 2.4. Types de Donn√©es
### 2.4.1 Les chaines de caract√®res
### 2.4.2 Les listes
### 2.4.3 Les tuples
### 2.4.4 Les ensembles
### 2.4.5 Les dictionnaires
## Exercices 
## Projet 3 : Pendu
## 2.5. Fonctions : d√©finition et appel
### 2.5.1 Les param√®tres et arguments
### 2.5.2 Les types de fonctions
### 2.5.3 La port√©e des variables
### 2.5.4 Nombre variable d'arguments
### 2.5.5 Les fonctions anonymes : lambda
### 2.5.6 Les fonctions et la r√©cursivit√©
### 2.5.7 G√©n√©rateurs et d√©corateurs
## Exercices 3
## 3. Gestion des exceptions
### 3.1 D√©finition
### 3.2 Traitement des exceptions
#### 3.2.1 Try-Except
#### 3.2.2 Finally
#### 3.2.3 Else
### 3.3 Assertions
### 3.4 Raise
## Projet 2 bis : Casino avec exceptions
## Exercices 4
## 4. Lecture et √©criture de fichiers
### 4.1 Gestion simple des fichiers
### 4.2 Travailler avec diff√©rents formats de fichier
## Exercices 5
## Projet 4 : Trieur de fichier
## 5. Modules et Packages
## Exercices 6
## 6. Bonnes Pratiques en Programmation
## Projet 5 : Gestionnaire de t√¢ches
## 7. Certification avec DataCamp - bonus
## 8. R√©f√©rences

::: {.callout-important}
## √Ä Retenir
:::
::: {.callout-caution}
### Le terme `__main__` 
:::

::: {.callout-tip}
### Focus : PEP8 et Annotation de type 
:::


Maintenant TIME TO PRACTICE ! üí™

## Exercices 

Je t'ai concoct√© une s√©rie d'exercices passionnants üåü qui te permettront non seulement de cr√©er de nouvelles classes, mais aussi de (re)d√©couvrir des notions essentielles de la programmation Python üêç. 

Ces exercices sont sp√©cialement con√ßus pour booster ta compr√©hension des principes de la programmation orient√©e objet üîÑ, tout en te donnant l'occasion de manipuler des attributs, de g√©rer des m√©thodes, et d'explorer des interactions complexes entre objets. 

Bonne courage et surtout, prends du plaisir en codant ! üöÄ‚ú®

### 1 - Facile : Cr√©ation de la classe `Rappeur`
#### √ânonc√©
Cr√©e une classe `Rappeur` avec les attributs suivants :

* `nom` : le nom du rappeur.

* `flow` : une description du style de flow du rappeur.

* `albums` : une liste des noms d'albums du rappeur.

La classe doit aussi inclure une m√©thode `introduction()` qui affiche une phrase d√©crivant le rappeur et une m√©thode `sortir_album()` qui prend le nom d'un nouvel album et l'ajoute √† la liste des albums.

::: {.callout-tip}
## Conseil
Pour la m√©thode sortir_album(), assure-toi de v√©rifier que l'album n'est pas d√©j√† dans la liste avant de l'ajouter. Cela √©vitera les doublons dans la discographie du rappeur.
:::

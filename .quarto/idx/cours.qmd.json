{"title":"1. Introduction","markdown":{"headingText":"1. Introduction","containsRefs":false,"markdown":"\nLa Programmation Orient√©e Objet (POO), c'est la base de la base, le flow de la programmation !\n\nEn POO, **une classe c'est comme un moule √† objets**, une repr√©sentation qui d√©finit les caract√©ristiques et les comportements des entit√©s du m√™me type.\n\nEt un **objet** ? **C'est une instance unique cr√©√©e √† partir de ce moule**, comme un rappeur qui sort du lot !\n\nTout comme un rappeur a ses propres caract√©ristiques (son flow, son style, ses punchlines...), **un objet a ses propres attributs (des variables) et m√©thodes (des fonctions).**\n\n<div style=\"text-align: center;\">\n  <img src=\"images/car_class.png\" alt=\"OOP car class\" style=\"width: 400px;\">\n  <p><em> Fig 1. Imagine une voiture en tant que classe, avec des attributs principaux tels que le mod√®le, le prix, la couleur et l'ann√©e de construction. Tu peux cr√©er autant d‚Äôobjets que tu le souhaites √† partir de la classe.</em></p>\n</div>\n\nEn Python, tout est objet, m√™me les classes ! C'est dire si √ßa a de la classe.\n\nPour acc√©der aux attributs d'un objet, on utilise la notation **\"dot\"**, comme quand on dit *\"tel rappeur.son flow\"*, tu vois le style ?\n\nEt pour cr√©er une instance √† partir d'une classe, c'est comme si tu lan√ßais un nouveau rappeur dans le game ! Tu utilises le constructeur de la classe.\n\nBref, la POO c'est le swag de la programmation ! √áa structure ton code comme un bon album, avec chaque classe qui joue son r√¥le.\n\nAlors, t'es chaud pour devenir une OOP star ?\nOn va coder √ßa comme jamais ! \n\n## 2 - La POO pour les MC's : Les avantages du flow\n\nLes avantages de ce style de programmation, c'est comme les atouts d'un bon rappeur :\n\n> **Un flow r√©utilisable et partageable üé§**\nAvec la POO, ton code est comme un bon couplet : \nTu peux le r√©utiliser et le partager sans tout r√©√©crire √† chaque fois !\n\n> **Une s√©curit√© renforc√©e üîí**\nLa POO, c'est comme un bon contrat de label : \nTu prot√®ges tes donn√©es sensibles pour √©viter les leaks !\n\n> **Un debugging facilit√© üêõ**\nAvec la POO, quand y'a un bug, c'est comme chercher la fausse note : \nTu sais direct dans quelle mesure chercher !\n\n> **Une flexibilit√© de ouf üöÄ**\nLa POO, c'est comme un featuring qui d√©chire : \nTu peux r√©utiliser les talents de plusieurs classes sans r√©inventer la roue !\n\n**Les mots cl√©s de la POO**, c'est comme le flow, les punchlines, les phases et les mesures pour un rappeur : \n**Classe, Objet, M√©thodes et Attributs, c'est les bases pour rapper de la bonne POO !**\n\nEt les **4 concepts fondamentaux**, c'est comme les 4 √©l√©ments du hip-hop :\n\n1. **H√©ritage**\n\n2. **Encapsulation**\n\n3. **Polymorphisme** \n\n4. **Abstraction**\n\nC'est ce qui fait toute la richesse de la POO !\n\n::: {.callout-important collapse=false}\n## √Ä Retenir\n\nEn somme, la POO, c'est plus modulaire qu'un beat et plus r√©utilisable qu'un sample. Elle permet :\n<ul>\n    <li>Modularit√© et r√©utilisabilit√© du code</li>\n     <li>Facilit√© de maintenance et d'√©volution du code</li>\n     <li>Repr√©sentation naturelle des concepts du monde r√©el</li>\n</ul>\n:::\n\n## 3. Classe = Moule √† objets\n\n**Une classe, c'est comme un moule √† g√¢teau en forme de rappeur** :\n\nElle d√©finit les caract√©ristiques et les comportements - comme un rappeur a son style, son flow, ses punchlines.\n\nConcr√®tement, une classe c'est un *blueprint*, un mod√®le qui va servir √† cr√©er des objets.\n\nC'est un peu comme un label de musique qui a son identit√© et qui va signer des artistes qui correspondent √† son style.\n\n**Quand tu cr√©es un objet √† partir de cette classe, on dit que tu cr√©es une instance**. \n\n> Une instance est un exemplaire unique de cette classe !\n\nUn peu comme un rappeur sign√© sur le label, qui a son style propre tout en s'inscrivant dans l'identit√© du label.\n\nEt le gros avantage, c'est que **tu peux cr√©er autant d'instances que tu veux √† partir de la m√™me classe** !\n\nC'est comme si ton label pouvait signer des dizaines de rappeurs qui ont chacun leur personnalit√© mais qui repr√©sentent tous l'esprit du label.\n\nBref, les classes c'est la base de la POO et c'est ce qui va te permettre de structurer ton code de fa√ßon claire et r√©utilisable.\n\n```{python}\n# D√©finition basique de la classe Rappeur\nclass Rappeur: \n    pass\n\n# D√©finition de l'instance unique menyssa\nmenyssa = Rappeur()  \n\n# menyssa est bien un objet Rappeur\ntype(menyssa) \n```\n\n::: {.callout-caution}\n### Le terme `__main__` \n\nLe terme `__main__` dans Python a une signification sp√©ciale. Il fait r√©f√©rence au nom de l'espace de noms (ou du \"scope\") dans lequel le script courant est ex√©cut√©. \n\nC'est une mani√®re pour Python de savoir si le fichier actuel est ex√©cut√© comme script principal ou s'il est import√© √† partir d'un autre fichier.*\n\n:::\n\n## 4. Constructeur : `__init__` et  `self`, les kickstarts de l'instanciation\nLe constructeur `__init__` est **appel√© automatiquement quand tu cr√©es une nouvelle instance de ta classe.**\n\nSon r√¥le ? \n\n**Initialiser les attributs de ton objet**, comme un Directeur Artistique (DA) qui d√©finirait le style et l'image de son artiste.\n\nEt `self` dans tout √ßa ? **C'est le rappeur lui-m√™me !** \n\nDans une m√©thode, `self` fait r√©f√©rence √† l'instance courante de la classe. **C'est gr√¢ce √† lui que tu peux acc√©der aux attributs et m√©thodes de ton objet.**\n\nQuand tu appelles une m√©thode sur une instance, Python passe automatiquement cette instance en premier argument. \nC'est pour √ßa que tu retrouves `self` partout !\n\n::: {.callout-important collapse=false}\n## √Ä Retenir\n\n<code>__init__ et self</code>, permettent de construire et de faire vivre tes objets, comme un DA et son rappeur qui cr√©ent ensemble un personnage unique. :\n<ul>\n  <li><code>__init__</code> est le constructeur qui initialise les attributs</li>\n  <li><code>self</code> repr√©sente l'instance courante dans les m√©thodes</li>\n  <li> Ensemble, ils donnent vie √† tes objets et leur permettent d'interagir avec le monde !</li>\n</ul>\n:::\n\n## 5. Attributs : les caract√®res qui font un bon rappeur\n\nLes attributs en POO, c'est comme les caract√©ristiques qui d√©finissent un bon rappeur. \n\nPar exemple pour chaque rappeur on peut lui attribu√© les caract√©ristiques suivantes : \n\n1. **Le flow (self.flow)** : c'est son d√©bit, sa mani√®re de rapper. √áa peut √™tre smooth, agressif, technique... C'est ce qui fait son style unique.\n\n2. **Le nombre d'albums (self.nb_albums)** : √ßa montre son exp√©rience, comme le nombre de projets sur GitHub pour un dev. Plus t'en as, plus t'es respect√© !\n\n3. **Les featuring (self.featurings)** : c'est les collab avec d'autres artistes. Comme quand tu fais du pair programming ou que tu participes √† un projet open source.\n\nVoici comment d√©clarer ces attributs dans notre classe \"Rappeur\" \n\n```{python}\n# D√©finition de la classe Rappeur \nclass Rappeur:\n    # Constructeur de la classe avec les attributs\n    def __init__(self, nom, flow, nb_albums, featurings):\n        self.nom = nom              # Nom du rappeur\n        self.flow = flow            # Style de flow musical du rappeur\n        self.nb_albums = nb_albums  # Nombre total d'albums produits\n        self.featurings = featurings  # Liste des artistes avec lesquels il a collabor√©\n\n# Cr√©ation des instances de la classe Rappeur pour Booba, Vald et Niska.\n# Chaque instance est cr√©√©e avec des d√©tails sp√©cifiques au rappeur.\nbooba = Rappeur(nom=\"Booba\", \n                flow=\"Agressif et technique\",                \n                nb_albums=10,\n                featurings=[\"Kaaris\", \"Damso\", \"Gato\"])\n\nvald = Rappeur(nom=\"Vald\",\n               flow=\"Sombre et introspectif\",\n               nb_albums=6,\n               featurings=[\"Suikon Blaz AD\", \"Damso\"])\n\nniska = Rappeur(nom=\"Niska\", \n                flow=\"M√©lodique et festif\", \n                nb_albums=4, \n                featurings=[\"Booba\", \"SCH\", \"Hamza\"])\n\n# Ici, on affiche le nombre d'albums produits par Niska et le style de Booba.\nprint(f\"Niska a produit {niska.nb_albums} albums et \\n\"\n      f\"le flow de Booba est : {booba.flow}\")\n\n# Ici, on affiche le flow de vald et son nombre d'album.\nprint(f\"\\nVald a produit {vald.nb_albums} albums et son flow est {vald.flow.lower()}\")\n```\n\n## 6. M√©thodes : les skills qui font un bon MC\n\nLes m√©thodes, c'est ce qui permet √† tes objets d'agir, d'interagir et de se d√©marquer. \n\nUne m√©thode peut √™tre :\n\n- Un flow \"getter\" pour r√©cup√©rer des infos (`get_punchline()`)\n- Un flow \"setter\" pour modifier l'√©tat (`set_style(new_style)`) \n- Un flow \"calculateur\" pour traiter des donn√©es (`calculer_nb_albums()`)\n- Ou m√™me un flow \"abstract\" pour d√©finir un comportement g√©n√©ral (`rapper()`)\n\nLes m√©thodes, c'est aussi ce qui permet √† tes objets de communiquer entre eux. \nUn peu comme des featuring entre rappeurs !\n\n```{python}\n# Importation du module random\nimport random\n\n# D√©finition de la classe Rappeur\nclass Rappeur:\n    # Constructeur de la classe avec les attributs n√©cessaires pour d√©finir un rappeur\n    def __init__(self, nom, flow, nb_albums, featurings, punchlines):\n        self.nom = nom              \n        self.flow = flow            \n        self.nb_albums = nb_albums  \n        self.featurings = featurings  \n        self.punchlines = punchlines  # Liste des punchlines c√©l√®bres du rappeur\n    \n    # M√©thode pour afficher une punchline au hasard\n    def balancer_punchline(self):\n        # Utilisation de random.choice pour s√©lectionner et afficher une punchline al√©atoire de la liste\n        print(f\"{self.nom} balance : {random.choice(self.punchlines)}\")\n\n# Cr√©ation d'une instance Booba\nbooba = Rappeur(nom=\"Booba\", \n                flow=\"Agressif et technique\",                \n                nb_albums=10,\n                featurings=[\"Kaaris\", \"Damso\", \"Gato\"],\n                punchlines=[\"92i\", \"Pitbull\", \"Kalash\"])\n\n# Appel de la m√©thode balancer_punchline pour afficher une punchline de Booba tir√©e au hasard\nbooba.balancer_punchline()\n```\n\nMaintenant allons un peu plus long et imaginons un clash entre rappeurs (*hihihi!*)\n\n```{python}\nimport random  # Importation n√©cessaire pour utiliser random.choice\n\nclass Rappeur:\n    def __init__(self, nom, flow, nb_albums, featurings, punchlines):\n        self.nom = nom  \n        self.flow = flow  \n        self.nb_albums = nb_albums  \n        self.featurings = featurings  \n        self.punchlines = punchlines  \n\n\n    def balancer_punchline(self):\n        print(f\"{self.nom} balance : {random.choice(self.punchlines)}\")\n\n    # M√©thode permettant √† un rappeur de clasher un autre rappeur \n    # en utilisant la premi√®re punchline de sa liste\n    def clasher(self, autre_rappeur):\n        print(f\"{self.nom} clash {autre_rappeur.nom} : {self.punchlines[0]}\")\n        \n    # M√©thode permettant √† un rappeur de r√©pondre √† un \n    # clash avec une punchline sp√©cifique\n    def repondre(self, autre_rappeur, punchline):\n        print(f\"{self.nom} r√©pond √† {autre_rappeur.nom} : {punchline}\")\n\n# Cr√©ation des instances pour Booba et Kaaris\nbooba = Rappeur(nom=\"Booba\", \n                flow=\"Agressif et technique\",                \n                nb_albums=10,\n                featurings=[\"Kaaris\", \"Damso\", \"Gato\"],\n                punchlines=[\"T'es qu'un fils de...\", \"J'vais t'faire une Kalash en live\"])        \n\nkaaris = Rappeur(nom=\"Kaaris\",\n                 flow=\"Aggressif et sombre\",\n                 nb_albums=8,\n                 featurings=[\"Gazo\", \"Kalash Criminel\", \"Hamza\"],\n                 punchlines=[\"J'vais t'faire danser la Zumba\", \"T'es m√™me pas un vrai MC\"])\n\n# Simulation d'un clash entre Booba et Kaaris\nbooba.clasher(kaaris)\nkaaris.repondre(booba, \"T'es qu'un tocard !\")\nbooba.repondre(kaaris, \"TG ! J'suis le DUC !\")\n```\n\nLa puissance des attributs et des m√©thodes r√©sident dans l'int√©raction de tes objets de mani√®re intuitive et ***styl√©e.***\n\n::: {.callout-important collapse=false}\n## √Ä Retenir\n\nles attributs et m√©thodes c'est ce qui donne vie √† tes objets et leur permet de briller sur la sc√®ne de ton programme !\n\nAlors pour cr√©er des m√©thodes qui claquent, suis ces tips :\n<ul>\n  <li>Donne-leur un nom explicite qui d√©crit bien leur r√¥le</li>\n  <li>Utilise le `self` pour acc√©der aux attributs et autres m√©thodes de l'objet</li>\n  <li>S√©pare bien les responsabilit√©s : une m√©thode = une t√¢che pr√©cise</li>\n  <li>Documente-les avec des docstrings pour expliquer ce qu'elles font</li>\n  <li>La PEP 8 est ton ami !</li>\n</ul>\n:::\n\n::: {.callout-tip}\n### Focus : PEP8 et Annotation de type \n\nVoici la m√™me classe avec le **code PEP 8 friendly** et  les annotations de type\n```{python}\nfrom typing import List # annoter les attributs featurings et punchlines.\nimport random\nclass Rappeur:\n    \"\"\"Classe d√©finissant un rappeur caract√©ris√© par son nom, style de flow, nombre \n    d'albums, collaborations et punchlines.\n    \"\"\"\n    def __init__(self, nom: str, flow: str, nb_albums: int, featurings: List[str], \n                 punchlines: List[str]):\n        self.nom: str = nom\n        self.flow: str = flow\n        self.nb_albums: int = nb_albums\n        self.featurings: List[str] = featurings\n        self.punchlines: List[str] = punchlines\n\n    def balancer_punchline(self) -> None:\n        \"\"\"Affiche une punchline al√©atoire du rappeur.\"\"\"\n        punchline: str = random.choice(self.punchlines)\n        print(f\"{self.nom} balance : {punchline}\")\n\n    def clasher(self, autre_rappeur: 'Rappeur') -> None:\n        \"\"\"Permet au rappeur de clasher un autre rappeur en utilisant la premi√®re \n        punchline de sa liste.\n        \"\"\"\n        print(f\"{self.nom} clash {autre_rappeur.nom} : {self.punchlines[0]}\")\n        \n    def repondre(self, autre_rappeur: 'Rappeur', punchline: str) -> None:\n        \"\"\"Permet au rappeur de r√©pondre √† un clash avec une punchline sp√©cifique.\"\"\"\n        print(f\"{self.nom} r√©pond √† {autre_rappeur.nom} : {punchline}\")\n\n# Cr√©ation d'instances pour Booba et Kaaris avec typage explicite\nbooba = Rappeur(\n    nom=\"Booba\", \n    flow=\"Agressif et technique\",                \n    nb_albums=10,\n    featurings=[\"Kaaris\", \"Damso\", \"Gato\"],\n    punchlines=[\"T'es qu'un fils de...\", \"J'vais t'faire une Kalash en live\"]\n)        \n\nkaaris = Rappeur(\n    nom=\"Kaaris\",\n    flow=\"Aggressif et sombre\",\n    nb_albums=8,\n    featurings=[\"Gazo\", \"Kalash Criminel\", \"Hamza\"],\n    punchlines=[\"J'vais t'faire danser la Zumba\", \"T'es m√™me pas un vrai MC\"]\n)\n\n# Simulation d'un clash et r√©ponses entre Booba et Kaaris\nbooba.clasher(kaaris)\nkaaris.repondre(booba, \"T'es qu'un tocard !\")\nbooba.repondre(kaaris, \"TG ! J'suis le DUC !\")\n```\n:::\n\n## 7. Modifier les attributs d'un Rappeur\n\nC'est essentiel pour g√©rer les interactions entre objets, contr√¥ler l'acc√®s aux donn√©es et rendre le code plus lisible, comme un rappeur qui adapte son flow √† diff√©rents beats pour cr√©er des sons uniques et puissants. üé§üí™\n\nComme vu pr√©c√©demment, pour chaque instance de `Rappeur`, tu peux acc√©der √† ses attributs directement \n\n```{python}\nprint(booba.nom)  \nprint(booba.flow) \n```\nPour modifier les attributs, tu assignes simplement une nouvelle valeur. \n\nPar exemple, si tu veux changer le flow de Booba \n\n```{python}\nbooba.flow = \"Lyrique et complexe\"\nprint(booba.flow)\n```\n\nSi tu veux changer une punchline sp√©cifique ou en ajouter une nouvelle \n```{python}\nbooba.punchlines[0] = \"Nouvelle punchline plus forte\"\nbooba.punchlines.append(\"Tout le monde sait que j'suis le meilleur\")  \n```\n\nIl est souvent *plus* judicieux de contr√¥ler la modification des attributs via des m√©thodes au lieu de les modifier directement. Cela offre une meilleure **encapsulation** (notion que nous verrons apr√®s). \n\nTu pourrais ajouter une m√©thode comme `changer_flow()` directement dans ta classe Rappeur\n\n```{python}\nfrom typing import List\nimport random\n\nclass Rappeur:\n    \"\"\"Classe d√©finissant un rappeur caract√©ris√© par son nom, style de flow, nombre \n    d'albums, collaborations et punchlines.\n    \"\"\"\n    def __init__(self, nom: str, flow: str, nb_albums: int, featurings: List[str], \n                 punchlines: List[str]):\n        self.nom: str = nom\n        self.flow: str = flow\n        self.nb_albums: int = nb_albums\n        self.featurings: List[str] = featurings\n        self.punchlines: List[str] = punchlines\n\n    def balancer_punchline(self) -> None:\n        \"\"\"Affiche une punchline al√©atoire du rappeur.\"\"\"\n        punchline: str = random.choice(self.punchlines)\n        print(f\"{self.nom} balance : {punchline}\")\n\n    def clasher(self, autre_rappeur: 'Rappeur') -> None:\n        \"\"\"Permet au rappeur de clasher un autre rappeur en utilisant la premi√®re \n        punchline de sa liste.\n        \"\"\"\n        print(f\"{self.nom} clash {autre_rappeur.nom} : {self.punchlines[0]}\")\n        \n    def repondre(self, autre_rappeur: 'Rappeur', punchline: str) -> None:\n        \"\"\"Permet au rappeur de r√©pondre √† un clash avec une punchline sp√©cifique.\"\"\"\n        print(f\"{self.nom} r√©pond √† {autre_rappeur.nom} : {punchline}\")\n\n    def changer_flow(self, nouveau_flow: str) -> None:\n        \"\"\"Change le flow du rappeur.\"\"\"\n        self.flow = nouveau_flow\n\n# Cr√©ation de l'instance de Booba\nbooba = Rappeur(\n    nom=\"Booba\", \n    flow=\"Agressif et technique\",                \n    nb_albums=10,\n    featurings=[\"Kaaris\", \"Damso\", \"Gato\"],\n    punchlines=[\"T'es qu'un fils de...\", \"J'vais t'faire une Kalash en live\"]\n)\n\n# Affichage du flow avant la modification\nprint(\"Flow avant : \", booba.flow)\n\n# Modification du flow\nbooba.changer_flow(\"Po√©tique et introspectif\")\n\n# Affichage du flow apr√®s la modification\nprint(\"Flow apr√®s : \", booba.flow)\n```\n\n::: {.callout-caution}\n### Toute variable n'est pas un attribut\n\nL'attribut nouveau_flow n'√©tait pas n√©cessaire dans le constructeur de la classe. Pour changer le flow, il est plus appropri√© d'utiliser une m√©thode d√©di√©e. \n\nExplication : Le constructeur d'une classe est g√©n√©ralement utilis√© pour initialiser les attributs qui d√©finissent l'√©tat de base d'une instance. nouveau_flow est plus une action ponctuelle qu'un attribut d'√©tat permanent de l'objet. Avoir un attribut initial pour flow est logique car il d√©crit une propri√©t√© de l'instance de Rappeur. En revanche, nouveau_flow ressemble plus √† une valeur temporaire utilis√©e pour modifier flow.*\n:::\n\nEn suivant ces √©tapes, tu peux efficacement g√©rer et mettre √† jour les attributs de tes instances de `Rappeur`, ce qui te permet de maintenir ton code organis√© et tes donn√©es √† jour.\n\nVoil√† les gars, vous savez maintenant comment g√©rer les attributs de vos rappeurs comme des pros ! \n\nMaintenant TIME TO PRACTICE ! üí™\n\n## Exercices \n\nJe t'ai concoct√© une s√©rie d'exercices passionnants üåü qui te permettront non seulement de cr√©er de nouvelles classes, mais aussi de (re)d√©couvrir des notions essentielles de la programmation Python üêç. \n\nCes exercices sont sp√©cialement con√ßus pour booster ta compr√©hension des principes de la programmation orient√©e objet üîÑ, tout en te donnant l'occasion de manipuler des attributs, de g√©rer des m√©thodes, et d'explorer des interactions complexes entre objets. \n\nBonne courage et surtout, prends du plaisir en codant ! üöÄ‚ú®\n\n### 1 - Facile : Cr√©ation de la classe `Rappeur`\n#### √ânonc√©\nCr√©e une classe `Rappeur` avec les attributs suivants :\n* `nom` : le nom du rappeur.\n* `flow` : une description du style de flow du rappeur.\n* `albums` : une liste des noms d'albums du rappeur.\n\nLa classe doit aussi inclure une m√©thode `introduction()` qui affiche une phrase d√©crivant le rappeur et une m√©thode `sortir_album()` qui prend le nom d'un nouvel album et l'ajoute √† la liste des albums.\n\n::: {.callout-tip}\n## Conseil\nPour la m√©thode sortir_album(), assure-toi de v√©rifier que l'album n'est pas d√©j√† dans la liste avant de l'ajouter. Cela √©vitera les doublons dans la discographie du rappeur.\n:::\n\n### 2 - Facile : La Biblioth√®que \n#### √ânonc√©\nCr√©e une classe `Livre` avec les attributs suivants :\n* `titre` : le titre du livre.\n* `auteur` : l'auteur du livre.\n\nLa classe doit inclure des m√©thodes pour :\n* D√©finir un premier livre num√©rique et afficher ses informations.\n* Mettre √† jour le titre et l'auteur d'un livre.\n* Afficher les d√©tails d'un livre.\n\n::: {.callout-tip}\n## Conseil\nLorsque tu modifies les attributs d'un livre, pense √† utiliser des m√©thodes de getter et de setter. Cela te permet de contr√¥ler comment les attributs sont mis √† jour et de valider les donn√©es si n√©cessaire.\n:::\n\n### 3 - Facile : Compte bancaire\n#### √ânonc√©\nCr√©e une classe `Account` avec les attributs suivants :\n* `solde` : le solde initial du compte.\n\nLa classe doit inclure des m√©thodes pour :\n* D√©poser des fonds sur le compte.\n* Retirer des fonds du compte.\n* Appliquer un taux d'int√©r√™t au solde du compte.\n\n::: {.callout-tip}\n## Conseil\nTeste scrupuleusement les m√©thodes de d√©p√¥t et de retrait pour g√©rer correctement les sc√©narios o√π le compte pourrait devenir n√©gatif. Ajoute des conditions pour emp√™cher le retrait de fonds sup√©rieurs au solde disponible.\n:::\n\n### 4 - Interm√©diaire : Conseiller financier \n#### √ânonc√©\nCr√©e une classe `CompteBancaire` avec les attributs suivants :\n* `identifiant` : l'identifiant du compte.\n* `nom_proprietaire` : le nom du propri√©taire du compte.\n* `solde` : le solde initial du compte.\n\nLa classe doit inclure des m√©thodes pour :\n* G√©rer les d√©p√¥ts et les retraits, en appliquant des agios en cas de d√©couvert.\n* Afficher tous les d√©tails du compte.\n\n::: {.callout-tip}\n## Conseil\n Pour g√©rer les d√©couverts, envisage d'ajouter un attribut qui d√©finit un d√©couvert maximum autoris√©. Cela rendra la gestion du compte plus flexible et r√©aliste.\n:::\n\n### 5 - Interm√©diaire : Gestion des Featurings\n#### √ânonc√©\nAm√©liore la classe `Rappeur` pour inclure un attribut `collaborations`, qui est une liste de tuples. Chaque tuple contient le nom d'un autre rappeur et le titre de la chanson sur laquelle ils ont collabor√©.\n\nLa classe doit inclure des m√©thodes pour :\n* Ajouter une collaboration √† la liste des collaborations.\n* Afficher toutes les collaborations du rappeur.\n\n::: {.callout-tip}\n## Conseil\nQuand tu ajoutes des collaborations, assure-toi de v√©rifier si la collaboration existe d√©j√† pour √©viter les entr√©es en double. Cela peut √™tre fait en v√©rifiant si le tuple (rappeur, titre de la chanson) est d√©j√† dans la liste des collaborations.\n:::\n\n### 6 - Difficile : Tournoi de Bataille\n#### √ânonc√©\nCr√©e une classe `Carte` avec les attributs suivants :\n* `valeur` : la valeur de la carte.\n* `nom` : le nom de la carte.\n\nCr√©e une classe `Paquet` avec les attributs suivants :\n* `cartes` : la liste des cartes du paquet.\n\nLa classe `Paquet` doit inclure des m√©thodes pour :\n* M√©langer le paquet de cartes.\n* Distribuer les cartes √©quitablement entre les joueurs.\n\nCr√©e une classe `Joueur` avec les attributs suivants :\n* `main` : la main du joueur.\n\nLa classe `Joueur` doit inclure des m√©thodes pour :\n* Pr√©parer la main du joueur pour la bataille.\n\nCr√©e une classe `Tournoi` avec les attributs suivants :\n* `joueurs` : la liste des joueurs participants.\n\nLa classe `Tournoi` doit inclure des m√©thodes pour :\n* D√©rouler la bataille entre les joueurs.\n* D√©clarer le gagnant du tournoi.\n\n::: {.callout-tip}\n## Conseil\nPour la distribution des cartes, assure-toi que le m√©lange soit complet avant de distribuer les cartes afin d'assurer l'√©quit√© du jeu. Utilise des m√©thodes robustes pour g√©rer les √©galit√©s et les cas sp√©ciaux o√π plusieurs tours de cartes sont n√©cessaires.\n:::\n\n### 7 - Difficile : Battle de Rap\n#### √ânonc√©\nCr√©e une classe `Battle` avec les attributs suivants :\n* `rappeur1` : le premier rappeur participant.\n* `rappeur2` : le deuxi√®me rappeur participant.\n\nLa classe `Battle` doit inclure des m√©thodes pour :\n* Faire s'affronter les deux rappeurs en affichant leurs punchlines et d√©terminer le gagnant.\n* Afficher le gagnant de la bataille et sa punchline gagnante.\n\n**Bonus** : Impl√©mente une m√©thode `juger_punchline(punchline)` dans la classe `Rappeur` qui attribue un score √† une punchline bas√© sur des crit√®res comme la rime, le nombre de syllabes, ou d'autres aspects stylistiques que tu juges importants.\n\n::: {.callout-tip}\n## Conseil\nDans la m√©thode `juger_punchline(punchline)`, consid√®re d'utiliser des techniques d'analyse de texte pour √©valuer les punchlines, comme compter les syllabes ou utiliser des expressions r√©guli√®res pour identifier les rimes et autres figures de style.\n:::\n\n## Correction \n\nLa correction sera disponible prochainement ;)\n\nN'h√©site pas √† prendre rdv si tu es bloqu√© : \n\n```{=html}\n<div style=\"text-align: center\">\n  <a href=\"https://cal.com/menyssa.cherifa-luron/1h\">\n    <button class=\"button-61\"> Prendre RDV ! üöÄ</button>\n  </a>\n</div>\n```","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true,"link-external-filter":"^(?:http:|https:)\\/\\/(?:lse-dsi\\.github\\.io\\/|localhost)"},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","highlight-style":"oblivion","email-obfuscation":"javascript","css":["css/custom_style.css","css/syllabus.css"],"toc":true,"output-file":"cours.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.549","theme":{"light":["lux","css/custom.scss"]}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}